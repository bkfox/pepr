/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkpepr_assets"] = self["webpackChunkpepr_assets"] || []).push([["vendor"],{

/***/ "./node_modules/@vuex-orm/core/dist/vuex-orm.esm.js":
/*!**********************************************************!*\
  !*** ./node_modules/@vuex-orm/core/dist/vuex-orm.esm.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"Actions\": () => (/* binding */ Actions),\n/* harmony export */   \"Attr\": () => (/* binding */ Attr),\n/* harmony export */   \"Attribute\": () => (/* binding */ Attribute),\n/* harmony export */   \"BelongsTo\": () => (/* binding */ BelongsTo),\n/* harmony export */   \"BelongsToMany\": () => (/* binding */ BelongsToMany),\n/* harmony export */   \"Boolean\": () => (/* binding */ Boolean),\n/* harmony export */   \"Container\": () => (/* binding */ Container),\n/* harmony export */   \"Database\": () => (/* binding */ Database),\n/* harmony export */   \"Getters\": () => (/* binding */ Getters),\n/* harmony export */   \"HasMany\": () => (/* binding */ HasMany),\n/* harmony export */   \"HasManyBy\": () => (/* binding */ HasManyBy),\n/* harmony export */   \"HasManyThrough\": () => (/* binding */ HasManyThrough),\n/* harmony export */   \"HasOne\": () => (/* binding */ HasOne),\n/* harmony export */   \"Model\": () => (/* binding */ Model),\n/* harmony export */   \"MorphMany\": () => (/* binding */ MorphMany),\n/* harmony export */   \"MorphOne\": () => (/* binding */ MorphOne),\n/* harmony export */   \"MorphTo\": () => (/* binding */ MorphTo),\n/* harmony export */   \"MorphToMany\": () => (/* binding */ MorphToMany),\n/* harmony export */   \"MorphedByMany\": () => (/* binding */ MorphedByMany),\n/* harmony export */   \"Number\": () => (/* binding */ Number),\n/* harmony export */   \"Query\": () => (/* binding */ Query),\n/* harmony export */   \"Relation\": () => (/* binding */ Relation),\n/* harmony export */   \"RootActions\": () => (/* binding */ RootActions),\n/* harmony export */   \"RootGetters\": () => (/* binding */ RootGetters),\n/* harmony export */   \"RootMutations\": () => (/* binding */ RootMutations),\n/* harmony export */   \"String\": () => (/* binding */ String$1),\n/* harmony export */   \"Type\": () => (/* binding */ Type),\n/* harmony export */   \"Uid\": () => (/* binding */ Uid$1),\n/* harmony export */   \"install\": () => (/* binding */ install),\n/* harmony export */   \"use\": () => (/* binding */ use)\n/* harmony export */ });\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar _global = createCommonjsModule(function (module) {\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n});\n\nvar _core = createCommonjsModule(function (module) {\nvar core = module.exports = { version: '2.6.11' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n});\nvar _core_1 = _core.version;\n\nvar _isObject = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\nvar _anObject = function (it) {\n  if (!_isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n\nvar _fails = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n\n// Thank's IE8 for his funny defineProperty\nvar _descriptors = !_fails(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n\nvar document = _global.document;\n// typeof document.createElement is 'object' in old IE\nvar is = _isObject(document) && _isObject(document.createElement);\nvar _domCreate = function (it) {\n  return is ? document.createElement(it) : {};\n};\n\nvar _ie8DomDefine = !_descriptors && !_fails(function () {\n  return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n\n// 7.1.1 ToPrimitive(input [, PreferredType])\n\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nvar _toPrimitive = function (it, S) {\n  if (!_isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\nvar dP = Object.defineProperty;\n\nvar f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  _anObject(O);\n  P = _toPrimitive(P, true);\n  _anObject(Attributes);\n  if (_ie8DomDefine) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\nvar _objectDp = {\n\tf: f\n};\n\nvar _propertyDesc = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\nvar _hide = _descriptors ? function (object, key, value) {\n  return _objectDp.f(object, key, _propertyDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\nvar hasOwnProperty = {}.hasOwnProperty;\nvar _has = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\nvar id = 0;\nvar px = Math.random();\nvar _uid = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n\nvar _shared = createCommonjsModule(function (module) {\nvar SHARED = '__core-js_shared__';\nvar store = _global[SHARED] || (_global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: _core.version,\n  mode:  'global',\n  copyright: 'Â© 2019 Denis Pushkarev (zloirock.ru)'\n});\n});\n\nvar _functionToString = _shared('native-function-to-string', Function.toString);\n\nvar _redefine = createCommonjsModule(function (module) {\nvar SRC = _uid('src');\n\nvar TO_STRING = 'toString';\nvar TPL = ('' + _functionToString).split(TO_STRING);\n\n_core.inspectSource = function (it) {\n  return _functionToString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) _has(val, 'name') || _hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === _global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    _hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    _hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || _functionToString.call(this);\n});\n});\n\nvar _aFunction = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n// optional / simple context binding\n\nvar _ctx = function (fn, that, length) {\n  _aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;\n    // extend global\n    if (target) _redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) _hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\n_global.core = _core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nvar _export = $export;\n\nvar toString = {}.toString;\n\nvar _cof = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\n\n// eslint-disable-next-line no-prototype-builtins\nvar _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return _cof(it) == 'String' ? it.split('') : Object(it);\n};\n\n// 7.2.1 RequireObjectCoercible(argument)\nvar _defined = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n\n// to indexed object, toObject with fallback for non-array-like ES3 strings\n\n\nvar _toIobject = function (it) {\n  return _iobject(_defined(it));\n};\n\n// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nvar _toInteger = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n\n// 7.1.15 ToLength\n\nvar min = Math.min;\nvar _toLength = function (it) {\n  return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n\nvar max = Math.max;\nvar min$1 = Math.min;\nvar _toAbsoluteIndex = function (index, length) {\n  index = _toInteger(index);\n  return index < 0 ? max(index + length, 0) : min$1(index, length);\n};\n\n// false -> Array#indexOf\n// true  -> Array#includes\n\n\n\nvar _arrayIncludes = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = _toIobject($this);\n    var length = _toLength(O.length);\n    var index = _toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\nvar _wks = createCommonjsModule(function (module) {\nvar store = _shared('wks');\n\nvar Symbol = _global.Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n});\n\n// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = _wks('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) _hide(ArrayProto, UNSCOPABLES, {});\nvar _addToUnscopables = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n\n// https://github.com/tc39/Array.prototype.includes\n\nvar $includes = _arrayIncludes(true);\n\n_export(_export.P, 'Array', {\n  includes: function includes(el /* , fromIndex = 0 */) {\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n_addToUnscopables('includes');\n\nvar includes = _core.Array.includes;\n\nvar shared = _shared('keys');\n\nvar _sharedKey = function (key) {\n  return shared[key] || (shared[key] = _uid(key));\n};\n\nvar arrayIndexOf = _arrayIncludes(false);\nvar IE_PROTO = _sharedKey('IE_PROTO');\n\nvar _objectKeysInternal = function (object, names) {\n  var O = _toIobject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (_has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n\n// IE 8- don't enum bug keys\nvar _enumBugKeys = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n\n// 19.1.2.14 / 15.2.3.14 Object.keys(O)\n\n\n\nvar _objectKeys = Object.keys || function keys(O) {\n  return _objectKeysInternal(O, _enumBugKeys);\n};\n\nvar f$1 = Object.getOwnPropertySymbols;\n\nvar _objectGops = {\n\tf: f$1\n};\n\nvar f$2 = {}.propertyIsEnumerable;\n\nvar _objectPie = {\n\tf: f$2\n};\n\n// 7.1.13 ToObject(argument)\n\nvar _toObject = function (it) {\n  return Object(_defined(it));\n};\n\n// 19.1.2.1 Object.assign(target, source, ...)\n\n\n\n\n\n\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nvar _objectAssign = !$assign || _fails(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = _toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = _objectGops.f;\n  var isEnum = _objectPie.f;\n  while (aLen > index) {\n    var S = _iobject(arguments[index++]);\n    var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) {\n      key = keys[j++];\n      if (!_descriptors || isEnum.call(S, key)) T[key] = S[key];\n    }\n  } return T;\n} : $assign;\n\n// 19.1.3.1 Object.assign(target, source)\n\n\n_export(_export.S + _export.F, 'Object', { assign: _objectAssign });\n\nvar assign = _core.Object.assign;\n\nvar isEnum = _objectPie.f;\nvar _objectToArray = function (isEntries) {\n  return function (it) {\n    var O = _toIobject(it);\n    var keys = _objectKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!_descriptors || isEnum.call(O, key)) {\n        result.push(isEntries ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n\n// https://github.com/tc39/proposal-object-values-entries\n\nvar $entries = _objectToArray(true);\n\n_export(_export.S, 'Object', {\n  entries: function entries(it) {\n    return $entries(it);\n  }\n});\n\nvar entries = _core.Object.entries;\n\n// https://github.com/tc39/proposal-object-values-entries\n\nvar $values = _objectToArray(false);\n\n_export(_export.S, 'Object', {\n  values: function values(it) {\n    return $values(it);\n  }\n});\n\nvar values = _core.Object.values;\n\n// 7.2.8 IsRegExp(argument)\n\n\nvar MATCH = _wks('match');\nvar _isRegexp = function (it) {\n  var isRegExp;\n  return _isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : _cof(it) == 'RegExp');\n};\n\n// helper for String#{startsWith, endsWith, includes}\n\n\n\nvar _stringContext = function (that, searchString, NAME) {\n  if (_isRegexp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(_defined(that));\n};\n\nvar MATCH$1 = _wks('match');\nvar _failsIsRegexp = function (KEY) {\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch (e) {\n    try {\n      re[MATCH$1] = false;\n      return !'/./'[KEY](re);\n    } catch (f) { /* empty */ }\n  } return true;\n};\n\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n_export(_export.P + _export.F * _failsIsRegexp(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = _stringContext(this, searchString, STARTS_WITH);\n    var index = _toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n\nvar startsWith = _core.String.startsWith;\n\n// true  -> String#at\n// false -> String#codePointAt\nvar _stringAt = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(_defined(that));\n    var i = _toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n\nvar _iterators = {};\n\nvar _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {\n  _anObject(O);\n  var keys = _objectKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) _objectDp.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n\nvar document$1 = _global.document;\nvar _html = document$1 && document$1.documentElement;\n\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n\n\n\nvar IE_PROTO$1 = _sharedKey('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE$1 = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = _domCreate('iframe');\n  var i = _enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  _html.appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE$1][_enumBugKeys[i]];\n  return createDict();\n};\n\nvar _objectCreate = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE$1] = _anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE$1] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO$1] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : _objectDps(result, Properties);\n};\n\nvar def = _objectDp.f;\n\nvar TAG = _wks('toStringTag');\n\nvar _setToStringTag = function (it, tag, stat) {\n  if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n_hide(IteratorPrototype, _wks('iterator'), function () { return this; });\n\nvar _iterCreate = function (Constructor, NAME, next) {\n  Constructor.prototype = _objectCreate(IteratorPrototype, { next: _propertyDesc(1, next) });\n  _setToStringTag(Constructor, NAME + ' Iterator');\n};\n\n// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\n\n\nvar IE_PROTO$2 = _sharedKey('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nvar _objectGpo = Object.getPrototypeOf || function (O) {\n  O = _toObject(O);\n  if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n\nvar ITERATOR = _wks('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nvar _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  _iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = _objectGpo($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      _setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if ( typeof IteratorPrototype[ITERATOR] != 'function') _hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ( (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    _hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  _iterators[NAME] = $default;\n  _iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) _redefine(proto, key, methods[key]);\n    } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n\nvar $at = _stringAt(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\n_iterDefine(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n\n// call something on iterator step with safe closing on error\n\nvar _iterCall = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(_anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) _anObject(ret.call(iterator));\n    throw e;\n  }\n};\n\n// check on default Array iterator\n\nvar ITERATOR$1 = _wks('iterator');\nvar ArrayProto$1 = Array.prototype;\n\nvar _isArrayIter = function (it) {\n  return it !== undefined && (_iterators.Array === it || ArrayProto$1[ITERATOR$1] === it);\n};\n\nvar _createProperty = function (object, index, value) {\n  if (index in object) _objectDp.f(object, index, _propertyDesc(0, value));\n  else object[index] = value;\n};\n\n// getting tag from 19.1.3.6 Object.prototype.toString()\n\nvar TAG$1 = _wks('toStringTag');\n// ES3 wrong here\nvar ARG = _cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nvar _classof = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T\n    // builtinTag case\n    : ARG ? _cof(O)\n    // ES3 arguments fallback\n    : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n\nvar ITERATOR$2 = _wks('iterator');\n\nvar core_getIteratorMethod = _core.getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR$2]\n    || it['@@iterator']\n    || _iterators[_classof(it)];\n};\n\nvar ITERATOR$3 = _wks('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR$3]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nvar _iterDetect = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR$3]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR$3] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n\n_export(_export.S + _export.F * !_iterDetect(function (iter) { Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n    var O = _toObject(arrayLike);\n    var C = typeof this == 'function' ? this : Array;\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var index = 0;\n    var iterFn = core_getIteratorMethod(O);\n    var length, result, step, iterator;\n    if (mapping) mapfn = _ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if (iterFn != undefined && !(C == Array && _isArrayIter(iterFn))) {\n      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n        _createProperty(result, index, mapping ? _iterCall(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = _toLength(O.length);\n      for (result = new C(length); length > index; index++) {\n        _createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n\nvar from_1 = _core.Array.from;\n\nvar Container = /** @class */ (function () {\n    function Container() {\n    }\n    /**\n     * Register the store instance.\n     */\n    Container.register = function (store) {\n        this.store = store;\n    };\n    return Container;\n}());\n\nvar install = (function (database, options) {\n    if (options === void 0) { options = {}; }\n    var namespace = options.namespace || 'entities';\n    return function (store) {\n        database.start(store, namespace);\n        Container.register(store);\n    };\n});\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nfunction __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nfunction __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\n\n/**\n * Check if the given value is the type of array.\n */\nfunction isArray(value) {\n    return Array.isArray(value);\n}\n/**\n * Gets the size of collection by returning its length for array-like values\n * or the number of own enumerable string keyed properties for objects.\n */\nfunction size(collection) {\n    return isArray(collection) ? collection.length : Object.keys(collection).length;\n}\n/**\n * Check if the given array or object is empty.\n */\nfunction isEmpty(collection) {\n    return size(collection) === 0;\n}\n/**\n * Iterates over own enumerable string keyed properties of an object and\n * invokes `iteratee` for each property.\n */\nfunction forOwn(object, iteratee) {\n    Object.keys(object).forEach(function (key) { return iteratee(object[key], key, object); });\n}\n/**\n * Creates an array of values by running each element in collection thru\n * iteratee. The iteratee is invoked with three arguments:\n * (value, key, collection).\n */\nfunction map(object, iteratee) {\n    var result = [];\n    for (var key in object) {\n        result.push(iteratee(object[key], key, object));\n    }\n    return result;\n}\n/**\n * Creates an object with the same keys as object and values generated by\n * running each own enumerable string keyed property of object thru\n * iteratee. The iteratee is invoked with three arguments:\n * (value, key, object).\n */\nfunction mapValues(object, iteratee) {\n    var newObject = Object.assign({}, object);\n    return Object.keys(object).reduce(function (records, key) {\n        records[key] = iteratee(object[key], key, object);\n        return records;\n    }, newObject);\n}\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of collection by the given key.\n */\nfunction keyBy(collection, key) {\n    var o = {};\n    collection.forEach(function (item) {\n        o[item[key]] = item;\n    });\n    return o;\n}\n/**\n * Creates an array of elements, sorted in specified order by the results\n * of running each element in a collection thru each iteratee.\n */\nfunction orderBy(collection, iteratees, directions) {\n    var index = -1;\n    var result = collection.map(function (value) {\n        var criteria = iteratees.map(function (iteratee) {\n            return typeof iteratee === 'function' ? iteratee(value) : value[iteratee];\n        });\n        return { criteria: criteria, index: ++index, value: value };\n    });\n    return baseSortBy(result, function (object, other) {\n        return compareMultiple(object, other, directions);\n    });\n}\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order\n * of equal elements.\n */\nfunction baseSortBy(array, comparer) {\n    var length = array.length;\n    array.sort(comparer);\n    var newArray = [];\n    while (length--) {\n        newArray[length] = array[length].value;\n    }\n    return newArray;\n}\n/**\n * Used by `orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order.\n * Otherwise, specify an order of \"desc\" for descending or \"asc\" for\n * ascending sort order of corresponding values.\n */\nfunction compareMultiple(object, other, orders) {\n    var index = -1;\n    var objCriteria = object.criteria;\n    var othCriteria = other.criteria;\n    var length = objCriteria.length;\n    var ordersLength = orders.length;\n    while (++index < length) {\n        var result = compareAscending(objCriteria[index], othCriteria[index]);\n        if (result) {\n            if (index >= ordersLength) {\n                return result;\n            }\n            var order = orders[index];\n            return result * (order === 'desc' ? -1 : 1);\n        }\n    }\n    return object.index - other.index;\n}\n/**\n * Compares values to sort them in ascending order.\n */\nfunction compareAscending(value, other) {\n    if (value !== other) {\n        var valIsDefined = value !== undefined;\n        var valIsNull = value === null;\n        var valIsReflexive = value === value;\n        var othIsDefined = other !== undefined;\n        var othIsNull = other === null;\n        var othIsReflexive = other === other;\n        if (typeof value !== 'number' || typeof other !== 'number') {\n            value = String(value);\n            other = String(other);\n        }\n        if ((!othIsNull && value > other) ||\n            (valIsNull && othIsDefined && othIsReflexive) ||\n            (!valIsDefined && othIsReflexive) ||\n            !valIsReflexive) {\n            return 1;\n        }\n        if ((!valIsNull && value < other) ||\n            (othIsNull && valIsDefined && valIsReflexive) ||\n            (!othIsDefined && valIsReflexive) ||\n            !othIsReflexive) {\n            return -1;\n        }\n    }\n    return 0;\n}\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of collection thru iteratee.\n */\nfunction groupBy(collection, iteratee) {\n    return collection.reduce(function (records, record) {\n        var key = iteratee(record);\n        if (records[key] === undefined) {\n            records[key] = [];\n        }\n        records[key].push(record);\n        return records;\n    }, {});\n}\n/**\n * Deep clone the given target object.\n */\nfunction cloneDeep(target) {\n    if (target === null) {\n        return target;\n    }\n    if (isArray(target)) {\n        var cp_1 = [];\n        target.forEach(function (v) { return cp_1.push(v); });\n        return cp_1.map(function (n) { return cloneDeep(n); });\n    }\n    if (typeof target === 'object' && target !== {}) {\n        var cp_2 = __assign({}, target);\n        Object.keys(cp_2).forEach(function (k) { return (cp_2[k] = cloneDeep(cp_2[k])); });\n        return cp_2;\n    }\n    return target;\n}\nvar Utils = {\n    isArray: isArray,\n    size: size,\n    isEmpty: isEmpty,\n    forOwn: forOwn,\n    map: map,\n    mapValues: mapValues,\n    keyBy: keyBy,\n    orderBy: orderBy,\n    groupBy: groupBy,\n    cloneDeep: cloneDeep\n};\n\nvar Uid = /** @class */ (function () {\n    function Uid() {\n    }\n    /**\n     * Generate an UUID.\n     */\n    Uid.make = function () {\n        this.count++;\n        return \"\" + this.prefix + this.count;\n    };\n    /**\n     * Reset the count to 0.\n     */\n    Uid.reset = function () {\n        this.count = 0;\n    };\n    /**\n     * Count to create a unique id.\n     */\n    Uid.count = 0;\n    /**\n     * Prefix string to be used for the id.\n     */\n    Uid.prefix = '$uid';\n    return Uid;\n}());\n\nvar Attribute = /** @class */ (function () {\n    /**\n     * Create a new attribute instance.\n     */\n    function Attribute(model) {\n        this.model = model;\n    }\n    return Attribute;\n}());\n\nvar Type = /** @class */ (function (_super) {\n    __extends(Type, _super);\n    /**\n     * Create a new type instance.\n     */\n    function Type(model, value, mutator) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        /**\n         * Whether if the attribute can accept `null` as a value.\n         */\n        _this.isNullable = false;\n        _this.value = value;\n        _this.mutator = mutator;\n        return _this;\n    }\n    /**\n     * Set `isNullable` to be `true`.\n     */\n    Type.prototype.nullable = function () {\n        this.isNullable = true;\n        return this;\n    };\n    /**\n     * Mutate the given value by mutator.\n     */\n    Type.prototype.mutate = function (value, key) {\n        var mutator = this.mutator || this.model.mutators()[key];\n        return mutator ? mutator(value) : value;\n    };\n    return Type;\n}(Attribute));\n\nvar Attr = /** @class */ (function (_super) {\n    __extends(Attr, _super);\n    /**\n     * Create a new attr instance.\n     */\n    function Attr(model, value, mutator) {\n        /* istanbul ignore next */\n        return _super.call(this, model, value, mutator) || this;\n    }\n    /**\n     * Make value to be set to model property. This method is used when\n     * instantiating a model or creating a plain object from a model.\n     */\n    Attr.prototype.make = function (value, _parent, key) {\n        value = value !== undefined ? value : this.value;\n        // Default Value might be a function (taking no parameter).\n        var localValue = value;\n        if (typeof value === 'function') {\n            localValue = value();\n        }\n        return this.mutate(localValue, key);\n    };\n    return Attr;\n}(Type));\n\nvar String$1 = /** @class */ (function (_super) {\n    __extends(String, _super);\n    /**\n     * Create a new string instance.\n     */\n    function String(model, value, mutator) {\n        /* istanbul ignore next */\n        return _super.call(this, model, value, mutator) || this;\n    }\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    String.prototype.make = function (value, _parent, key) {\n        return this.mutate(this.fix(value), key);\n    };\n    /**\n     * Convert given value to the string.\n     */\n    String.prototype.fix = function (value) {\n        if (value === undefined) {\n            return this.value;\n        }\n        if (typeof value === 'string') {\n            return value;\n        }\n        if (value === null && this.isNullable) {\n            return value;\n        }\n        return value + '';\n    };\n    return String;\n}(Type));\n\nvar Number = /** @class */ (function (_super) {\n    __extends(Number, _super);\n    /**\n     * Create a new number instance.\n     */\n    function Number(model, value, mutator) {\n        /* istanbul ignore next */\n        return _super.call(this, model, value, mutator) || this;\n    }\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    Number.prototype.make = function (value, _parent, key) {\n        return this.mutate(this.fix(value), key);\n    };\n    /**\n     * Transform given data to the number.\n     */\n    Number.prototype.fix = function (value) {\n        if (value === undefined) {\n            return this.value;\n        }\n        if (typeof value === 'number') {\n            return value;\n        }\n        if (typeof value === 'string') {\n            return parseFloat(value);\n        }\n        if (typeof value === 'boolean') {\n            return value ? 1 : 0;\n        }\n        if (value === null && this.isNullable) {\n            return value;\n        }\n        return 0;\n    };\n    return Number;\n}(Type));\n\nvar Boolean = /** @class */ (function (_super) {\n    __extends(Boolean, _super);\n    /**\n     * Create a new number instance.\n     */\n    function Boolean(model, value, mutator) {\n        /* istanbul ignore next */\n        return _super.call(this, model, value, mutator) || this;\n    }\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    Boolean.prototype.make = function (value, _parent, key) {\n        return this.mutate(this.fix(value), key);\n    };\n    /**\n     * Transform given data to the boolean.\n     */\n    Boolean.prototype.fix = function (value) {\n        if (value === undefined) {\n            return this.value;\n        }\n        if (typeof value === 'boolean') {\n            return value;\n        }\n        if (typeof value === 'string') {\n            if (value.length === 0) {\n                return false;\n            }\n            var int = parseInt(value, 0);\n            return isNaN(int) ? true : !!int;\n        }\n        if (typeof value === 'number') {\n            return !!value;\n        }\n        if (value === null && this.isNullable) {\n            return value;\n        }\n        return false;\n    };\n    return Boolean;\n}(Type));\n\nvar Uid$1 = /** @class */ (function (_super) {\n    __extends(Uid$1, _super);\n    /**\n     * Create a new uid instance.\n     */\n    function Uid$1(model, value) {\n        /* istanbul ignore next */\n        return _super.call(this, model, value) || this;\n    }\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    Uid$1.prototype.make = function (value) {\n        if (typeof value === 'number' || typeof value === 'string') {\n            return value;\n        }\n        if (typeof this.value === 'function') {\n            return this.value();\n        }\n        return Uid.make();\n    };\n    return Uid$1;\n}(Type));\n\nvar Relation = /** @class */ (function (_super) {\n    __extends(Relation, _super);\n    function Relation() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Get relation query instance with constraint attached.\n     */\n    Relation.prototype.getRelation = function (query, name, constraints) {\n        var relation = query.newQuery(name);\n        constraints.forEach(function (constraint) { constraint(relation); });\n        return relation;\n    };\n    /**\n     * Get specified keys from the given collection.\n     */\n    Relation.prototype.getKeys = function (collection, key) {\n        return collection.reduce(function (models, model) {\n            if (model[key] === null || model[key] === undefined) {\n                return models;\n            }\n            models.push(model[key]);\n            return models;\n        }, []);\n    };\n    /**\n     * Create a new indexed map for the single relation by specified key.\n     */\n    Relation.prototype.mapSingleRelations = function (collection, key) {\n        var relations = new Map();\n        collection.forEach(function (record) {\n            var id = record[key];\n            !relations.get(id) && relations.set(id, record);\n        });\n        return relations;\n    };\n    /**\n     * Create a new indexed map for the many relation by specified key.\n     */\n    Relation.prototype.mapManyRelations = function (collection, key) {\n        var relations = new Map();\n        collection.forEach(function (record) {\n            var id = record[key];\n            var ownerKeys = relations.get(id);\n            if (!ownerKeys) {\n                ownerKeys = [];\n                relations.set(id, ownerKeys);\n            }\n            ownerKeys.push(record);\n        });\n        return relations;\n    };\n    /**\n     * Create a new indexed map for relations with order constraints.\n     */\n    Relation.prototype.mapRelationsByOrders = function (collection, relations, ownerKey, relationKey) {\n        var records = {};\n        relations.forEach(function (related, id) {\n            collection.filter(function (record) { return record[relationKey] === id; }).forEach(function (record) {\n                var id = record[ownerKey];\n                if (!records[id]) {\n                    records[id] = [];\n                }\n                records[id] = records[id].concat(related);\n            });\n        });\n        return records;\n    };\n    /**\n     * Check if the given record is a single relation, which is an object.\n     */\n    Relation.prototype.isOneRelation = function (record) {\n        if (!isArray(record) && record !== null && typeof record === 'object') {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Check if the given records is a many relation, which is an array\n     * of object.\n     */\n    Relation.prototype.isManyRelation = function (records) {\n        if (!isArray(records)) {\n            return false;\n        }\n        if (records.length < 1) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Wrap the given object into a model instance.\n     */\n    Relation.prototype.makeOneRelation = function (record, model) {\n        if (!this.isOneRelation(record)) {\n            return null;\n        }\n        var relatedModel = model.getModelFromRecord(record) || model;\n        return new relatedModel(record);\n    };\n    /**\n     * Wrap the given records into a collection of model instances.\n     */\n    Relation.prototype.makeManyRelation = function (records, model) {\n        var _this = this;\n        if (!this.isManyRelation(records)) {\n            return [];\n        }\n        return records.filter(function (record) {\n            return _this.isOneRelation(record);\n        }).map(function (record) {\n            var relatedModel = model.getModelFromRecord(record) || model;\n            return new relatedModel(record);\n        });\n    };\n    return Relation;\n}(Attribute));\n\nvar HasOne = /** @class */ (function (_super) {\n    __extends(HasOne, _super);\n    /**\n     * Create a new has one instance.\n     */\n    function HasOne(model, related, foreignKey, localKey) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        _this.related = _this.model.relation(related);\n        _this.foreignKey = foreignKey;\n        _this.localKey = localKey;\n        return _this;\n    }\n    /**\n     * Define the normalizr schema for the relationship.\n     */\n    HasOne.prototype.define = function (schema) {\n        return schema.one(this.related);\n    };\n    /**\n     * Attach the relational key to the related data. For example,\n     * when User has one Phone, it will attach value to the\n     * `user_id` field of Phone record.\n     */\n    HasOne.prototype.attach = function (key, record, data) {\n        // Check if the record has local key set. If not, set the local key to be\n        // the id value. This happens if the user defines the custom local key\n        // and didn't include it in the data being normalized.\n        if (!record[this.localKey]) {\n            record[this.localKey] = this.model.getIndexIdFromRecord(record);\n        }\n        // Then set the foreign key of the related record if it exists to be the\n        // local key of this record.\n        var related = data[this.related.entity] && data[this.related.entity][key];\n        if (related) {\n            related[this.foreignKey] = record[this.localKey];\n        }\n    };\n    /**\n     * Make value to be set to model property. This method is used when\n     * instantiating a model or creating a plain object from a model.\n     */\n    HasOne.prototype.make = function (value, _parent, _key) {\n        return this.makeOneRelation(value, this.related);\n    };\n    /**\n     * Load the has one relationship for the collection.\n     */\n    HasOne.prototype.load = function (query, collection, name, constraints) {\n        var relation = this.getRelation(query, this.related.entity, constraints);\n        this.addEagerConstraints(relation, collection);\n        this.match(collection, relation.get(), name);\n    };\n    /**\n     * Set the constraints for an eager load of the relation.\n     */\n    HasOne.prototype.addEagerConstraints = function (relation, collection) {\n        relation.whereFk(this.foreignKey, this.getKeys(collection, this.localKey));\n    };\n    /**\n     * Match the eagerly loaded results to their parents.\n     */\n    HasOne.prototype.match = function (collection, relations, name) {\n        var _this = this;\n        var dictionary = this.buildDictionary(relations);\n        collection.forEach(function (model) {\n            var id = model[_this.localKey];\n            var relation = dictionary[id];\n            model[name] = relation || null;\n        });\n    };\n    /**\n     * Build model dictionary keyed by the relation's foreign key.\n     */\n    HasOne.prototype.buildDictionary = function (relations) {\n        var _this = this;\n        return relations.reduce(function (dictionary, relation) {\n            var key = relation[_this.foreignKey];\n            dictionary[key] = relation;\n            return dictionary;\n        }, {});\n    };\n    return HasOne;\n}(Relation));\n\nvar BelongsTo = /** @class */ (function (_super) {\n    __extends(BelongsTo, _super);\n    /**\n     * Create a new belongs to instance.\n     */\n    function BelongsTo(model, parent, foreignKey, ownerKey) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        _this.parent = _this.model.relation(parent);\n        _this.foreignKey = foreignKey;\n        _this.ownerKey = ownerKey;\n        return _this;\n    }\n    /**\n     * Define the normalizr schema for the relationship.\n     */\n    BelongsTo.prototype.define = function (schema) {\n        return schema.one(this.parent);\n    };\n    /**\n     * Attach the relational key to the given data. For example, when Post\n     * belongs to User, it will attach value to the `user_id` field of\n     * Post record.\n     */\n    BelongsTo.prototype.attach = function (key, record, data) {\n        // See if the record has the foreign key, if yes, it means the user has\n        // provided the key explicitly so do nothing and return.\n        if (record[this.foreignKey] !== undefined) {\n            return;\n        }\n        // If there is no foreign key, let's set it here.\n        record[this.foreignKey] = data[this.parent.entity] && data[this.parent.entity][key]\n            ? data[this.parent.entity][key][this.ownerKey]\n            : key;\n    };\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    BelongsTo.prototype.make = function (value, _parent, _key) {\n        return this.makeOneRelation(value, this.parent);\n    };\n    /**\n     * Load the belongs to relationship for the collection.\n     */\n    BelongsTo.prototype.load = function (query, collection, name, constraints) {\n        var relation = this.getRelation(query, this.parent.entity, constraints);\n        this.addEagerConstraints(relation, collection);\n        this.match(collection, relation.get(), name);\n    };\n    /**\n     * Set the constraints for an eager load of the relation.\n     */\n    BelongsTo.prototype.addEagerConstraints = function (relation, collection) {\n        relation.whereFk(this.ownerKey, this.getKeys(collection, this.foreignKey));\n    };\n    /**\n     * Match the eagerly loaded results to their parents.\n     */\n    BelongsTo.prototype.match = function (collection, relations, name) {\n        var _this = this;\n        var dictionary = this.buildDictionary(relations);\n        collection.forEach(function (model) {\n            var id = model[_this.foreignKey];\n            var relation = id !== null ? dictionary[id] : null;\n            model[name] = relation || null;\n        });\n    };\n    /**\n     * Build model dictionary keyed by the relation's foreign key.\n     */\n    BelongsTo.prototype.buildDictionary = function (relations) {\n        var _this = this;\n        return relations.reduce(function (dictionary, relation) {\n            var key = relation[_this.ownerKey];\n            dictionary[key] = relation;\n            return dictionary;\n        }, {});\n    };\n    return BelongsTo;\n}(Relation));\n\nvar HasMany = /** @class */ (function (_super) {\n    __extends(HasMany, _super);\n    /**\n     * Create a new has many instance.\n     */\n    function HasMany(model, related, foreignKey, localKey) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        _this.related = _this.model.relation(related);\n        _this.foreignKey = foreignKey;\n        _this.localKey = localKey;\n        return _this;\n    }\n    /**\n     * Define the normalizr schema for the relationship.\n     */\n    HasMany.prototype.define = function (schema) {\n        return schema.many(this.related);\n    };\n    /**\n     * Attach the relational key to the given data.\n     */\n    HasMany.prototype.attach = function (key, record, data) {\n        var _this = this;\n        key.forEach(function (index) {\n            var related = data[_this.related.entity];\n            if (!related || !related[index] || related[index][_this.foreignKey] !== undefined) {\n                return;\n            }\n            related[index][_this.foreignKey] = record[_this.localKey];\n        });\n    };\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    HasMany.prototype.make = function (value, _parent, _key) {\n        return this.makeManyRelation(value, this.related);\n    };\n    /**\n     * Load the has many relationship for the collection.\n     */\n    HasMany.prototype.load = function (query, collection, name, constraints) {\n        var relation = this.getRelation(query, this.related.entity, constraints);\n        this.addEagerConstraints(relation, collection);\n        this.match(collection, relation.get(), name);\n    };\n    /**\n     * Set the constraints for an eager load of the relation.\n     */\n    HasMany.prototype.addEagerConstraints = function (relation, collection) {\n        relation.whereFk(this.foreignKey, this.getKeys(collection, this.localKey));\n    };\n    /**\n     * Match the eagerly loaded results to their parents.\n     */\n    HasMany.prototype.match = function (collection, relations, name) {\n        var _this = this;\n        var dictionary = this.buildDictionary(relations);\n        collection.forEach(function (model) {\n            var id = model[_this.localKey];\n            var relation = dictionary[id];\n            model[name] = relation || [];\n        });\n    };\n    /**\n     * Build model dictionary keyed by the relation's foreign key.\n     */\n    HasMany.prototype.buildDictionary = function (relations) {\n        var _this = this;\n        return relations.reduce(function (dictionary, relation) {\n            var key = relation[_this.foreignKey];\n            if (!dictionary[key]) {\n                dictionary[key] = [];\n            }\n            dictionary[key].push(relation);\n            return dictionary;\n        }, {});\n    };\n    return HasMany;\n}(Relation));\n\nvar HasManyBy = /** @class */ (function (_super) {\n    __extends(HasManyBy, _super);\n    /**\n     * Create a new has many by instance.\n     */\n    function HasManyBy(model, parent, foreignKey, ownerKey) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        _this.parent = _this.model.relation(parent);\n        _this.foreignKey = foreignKey;\n        _this.ownerKey = ownerKey;\n        return _this;\n    }\n    /**\n     * Define the normalizr schema for the relationship.\n     */\n    HasManyBy.prototype.define = function (schema) {\n        return schema.many(this.parent);\n    };\n    /**\n     * Attach the relational key to the given data.\n     */\n    HasManyBy.prototype.attach = function (key, record, _data) {\n        var _this = this;\n        if (key.length === 0) {\n            return;\n        }\n        record[this.foreignKey] = key.map(function (parentId) {\n            return _this.parent.getIdFromRecord(_data[_this.parent.entity][parentId]);\n        });\n    };\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    HasManyBy.prototype.make = function (value, _parent, _key) {\n        return this.makeManyRelation(value, this.parent);\n    };\n    /**\n     * Load the has many by relationship for the collection.\n     */\n    HasManyBy.prototype.load = function (query, collection, name, constraints) {\n        var _this = this;\n        var relatedQuery = this.getRelation(query, this.parent.entity, constraints);\n        this.addConstraintForHasManyBy(relatedQuery, collection);\n        var relations = this.mapSingleRelations(relatedQuery.get(), this.ownerKey);\n        collection.forEach(function (item) {\n            var related = _this.getRelatedRecords(relations, item[_this.foreignKey]);\n            item[name] = related;\n        });\n    };\n    /**\n     * Set the constraints for an eager load of the relation.\n     */\n    HasManyBy.prototype.addConstraintForHasManyBy = function (query, collection) {\n        var _this = this;\n        var keys = collection.reduce(function (keys, item) {\n            return keys.concat(item[_this.foreignKey]);\n        }, []);\n        query.where(this.ownerKey, keys);\n    };\n    /**\n     * Get related records.\n     */\n    HasManyBy.prototype.getRelatedRecords = function (relations, keys) {\n        var records = [];\n        relations.forEach(function (record, id) {\n            if (keys.indexOf(id) !== -1) {\n                records.push(record);\n            }\n        });\n        return records;\n    };\n    return HasManyBy;\n}(Relation));\n\nvar HasManyThrough = /** @class */ (function (_super) {\n    __extends(HasManyThrough, _super);\n    /**\n     * Create a new has many through instance.\n     */\n    function HasManyThrough(model, related, through, firstKey, secondKey, localKey, secondLocalKey) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        _this.related = _this.model.relation(related);\n        _this.through = _this.model.relation(through);\n        _this.firstKey = firstKey;\n        _this.secondKey = secondKey;\n        _this.localKey = localKey;\n        _this.secondLocalKey = secondLocalKey;\n        return _this;\n    }\n    /**\n     * Define the normalizr schema for the relationship.\n     */\n    HasManyThrough.prototype.define = function (schema) {\n        return schema.many(this.related);\n    };\n    /**\n     * Attach the relational key to the given data. Since has many through\n     * relationship doesn't have any foreign key, it would do nothing.\n     */\n    HasManyThrough.prototype.attach = function (_key, _record, _data) {\n        return;\n    };\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    HasManyThrough.prototype.make = function (value, _parent, _key) {\n        return this.makeManyRelation(value, this.related);\n    };\n    /**\n     * Load the has many through relationship for the collection.\n     */\n    HasManyThrough.prototype.load = function (query, collection, name, constraints) {\n        var _this = this;\n        var relatedQuery = this.getRelation(query, this.related.entity, constraints);\n        var throughQuery = query.newQuery(this.through.entity);\n        this.addEagerConstraintForThrough(throughQuery, collection);\n        var throughs = throughQuery.get();\n        this.addEagerConstraintForRelated(relatedQuery, throughs);\n        var relateds = this.mapThroughRelations(throughs, relatedQuery);\n        collection.forEach(function (item) {\n            var related = relateds[item[_this.localKey]];\n            item[name] = related || [];\n        });\n    };\n    /**\n     * Set the constraints for the through relation.\n     */\n    HasManyThrough.prototype.addEagerConstraintForThrough = function (query, collection) {\n        query.where(this.firstKey, this.getKeys(collection, this.localKey));\n    };\n    /**\n     * Set the constraints for the related relation.\n     */\n    HasManyThrough.prototype.addEagerConstraintForRelated = function (query, collection) {\n        query.where(this.secondKey, this.getKeys(collection, this.secondLocalKey));\n    };\n    /**\n     * Create a new indexed map for the through relation.\n     */\n    HasManyThrough.prototype.mapThroughRelations = function (throughs, relatedQuery) {\n        var _this = this;\n        var relations = this.mapManyRelations(relatedQuery.get(), this.secondKey);\n        return throughs.reduce(function (records, record) {\n            var id = record[_this.firstKey];\n            if (!records[id]) {\n                records[id] = [];\n            }\n            var related = relations.get(record[_this.secondLocalKey]);\n            if (related === undefined) {\n                return records;\n            }\n            records[id] = records[id].concat(related);\n            return records;\n        }, {});\n    };\n    return HasManyThrough;\n}(Relation));\n\nvar BelongsToMany = /** @class */ (function (_super) {\n    __extends(BelongsToMany, _super);\n    /**\n     * Create a new belongs to instance.\n     */\n    function BelongsToMany(model, related, pivot, foreignPivotKey, relatedPivotKey, parentKey, relatedKey) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        /**\n         * The key name of the pivot data.\n         */\n        _this.pivotKey = 'pivot';\n        _this.related = _this.model.relation(related);\n        _this.pivot = _this.model.relation(pivot);\n        _this.foreignPivotKey = foreignPivotKey;\n        _this.relatedPivotKey = relatedPivotKey;\n        _this.parentKey = parentKey;\n        _this.relatedKey = relatedKey;\n        return _this;\n    }\n    /**\n     * Specify the custom pivot accessor to use for the relationship.\n     */\n    BelongsToMany.prototype.as = function (accessor) {\n        this.pivotKey = accessor;\n        return this;\n    };\n    /**\n     * Define the normalizr schema for the relationship.\n     */\n    BelongsToMany.prototype.define = function (schema) {\n        return schema.many(this.related);\n    };\n    /**\n     * Attach the relational key to the given data. Since belongs to many\n     * relationship doesn't have any foreign key, it would do nothing.\n     */\n    BelongsToMany.prototype.attach = function (_key, _record, _data) {\n        return;\n    };\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    BelongsToMany.prototype.make = function (value, _parent, _key) {\n        return this.makeManyRelation(value, this.related);\n    };\n    /**\n     * Load the belongs to relationship for the record.\n     */\n    BelongsToMany.prototype.load = function (query, collection, name, constraints) {\n        var _this = this;\n        var relatedQuery = this.getRelation(query, this.related.entity, constraints);\n        var pivotQuery = query.newQuery(this.pivot.entity);\n        this.addEagerConstraintForPivot(pivotQuery, collection);\n        var pivots = pivotQuery.get();\n        this.addEagerConstraintForRelated(relatedQuery, pivots);\n        var relateds = this.mapPivotRelations(pivots, relatedQuery);\n        collection.forEach(function (item) {\n            var related = relateds[item[_this.parentKey]];\n            item[name] = related || [];\n        });\n    };\n    /**\n     * Set the constraints for the pivot relation.\n     */\n    BelongsToMany.prototype.addEagerConstraintForPivot = function (query, collection) {\n        query.whereFk(this.foreignPivotKey, this.getKeys(collection, this.parentKey));\n    };\n    /**\n     * Set the constraints for the related relation.\n     */\n    BelongsToMany.prototype.addEagerConstraintForRelated = function (query, collection) {\n        query.whereFk(this.relatedKey, this.getKeys(collection, this.relatedPivotKey));\n    };\n    /**\n     * Create a new indexed map for the pivot relation.\n     */\n    BelongsToMany.prototype.mapPivotRelations = function (pivots, relatedQuery) {\n        var _this = this;\n        var relations = this.mapManyRelations(relatedQuery.get(), this.relatedKey);\n        if (relatedQuery.orders.length) {\n            return this.mapRelationsByOrders(pivots, relations, this.foreignPivotKey, this.relatedPivotKey);\n        }\n        return pivots.reduce(function (records, record) {\n            var id = record[_this.foreignPivotKey];\n            if (!records[id]) {\n                records[id] = [];\n            }\n            var related = relations.get(record[_this.relatedPivotKey]);\n            if (related) {\n                records[id] = records[id].concat(related.map(function (model) {\n                    model[_this.pivotKey] = record;\n                    return model;\n                }));\n            }\n            return records;\n        }, {});\n    };\n    /**\n     * Create pivot records for the given records if needed.\n     */\n    BelongsToMany.prototype.createPivots = function (parent, data, key) {\n        var _this = this;\n        if (!Utils.isArray(this.pivot.primaryKey))\n            return data;\n        Utils.forOwn(data[parent.entity], function (record) {\n            var related = record[key];\n            if (related === undefined || related.length === 0) {\n                return;\n            }\n            _this.createPivotRecord(data, record, related);\n        });\n        return data;\n    };\n    /**\n     * Create a pivot record.\n     */\n    BelongsToMany.prototype.createPivotRecord = function (data, record, related) {\n        var _this = this;\n        related.forEach(function (id) {\n            var _a, _b;\n            var parentId = record[_this.parentKey];\n            var relatedId = data[_this.related.entity][id][_this.relatedKey];\n            var pivotKey = JSON.stringify([\n                _this.pivot.primaryKey[0] === _this.foreignPivotKey ? parentId : relatedId,\n                _this.pivot.primaryKey[1] === _this.foreignPivotKey ? parentId : relatedId\n            ]);\n            var pivotRecord = data[_this.pivot.entity] ? data[_this.pivot.entity][pivotKey] : {};\n            var pivotData = data[_this.related.entity][id][_this.pivotKey] || {};\n            data[_this.pivot.entity] = __assign(__assign({}, data[_this.pivot.entity]), (_a = {}, _a[pivotKey] = __assign(__assign(__assign({}, pivotRecord), pivotData), (_b = { $id: pivotKey }, _b[_this.foreignPivotKey] = parentId, _b[_this.relatedPivotKey] = relatedId, _b)), _a));\n        });\n    };\n    return BelongsToMany;\n}(Relation));\n\nvar MorphTo = /** @class */ (function (_super) {\n    __extends(MorphTo, _super);\n    /**\n     * Create a new morph to instance.\n     */\n    function MorphTo(model, id, type) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        _this.id = id;\n        _this.type = type;\n        return _this;\n    }\n    /**\n     * Define the normalizr schema for the relationship.\n     */\n    MorphTo.prototype.define = function (schema) {\n        var _this = this;\n        return schema.union(function (_value, parentValue) { return parentValue[_this.type]; });\n    };\n    /**\n     * Attach the relational key to the given record. Since morph to\n     * relationship doesn't have any foreign key, it would do nothing.\n     */\n    MorphTo.prototype.attach = function (_key, _record, _data) {\n        return;\n    };\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    MorphTo.prototype.make = function (value, parent, _key) {\n        var related = parent[this.type];\n        try {\n            var model = this.model.relation(related);\n            return this.makeOneRelation(value, model);\n        }\n        catch (_a) {\n            return null;\n        }\n    };\n    /**\n     * Load the morph to relationship for the collection.\n     */\n    MorphTo.prototype.load = function (query, collection, name, constraints) {\n        var _this = this;\n        var types = this.getTypes(collection);\n        var relations = types.reduce(function (related, type) {\n            var relatedQuery = _this.getRelation(query, type, constraints);\n            related[type] = _this.mapSingleRelations(relatedQuery.get(), '$id');\n            return related;\n        }, {});\n        collection.forEach(function (item) {\n            var id = item[_this.id];\n            var type = item[_this.type];\n            var related = relations[type].get(String(id));\n            item[name] = related || null;\n        });\n    };\n    /**\n     * Get all types from the collection.\n     */\n    MorphTo.prototype.getTypes = function (collection) {\n        var _this = this;\n        return collection.reduce(function (types, item) {\n            var type = item[_this.type];\n            !types.includes(type) && types.push(type);\n            return types;\n        }, []);\n    };\n    return MorphTo;\n}(Relation));\n\nvar MorphOne = /** @class */ (function (_super) {\n    __extends(MorphOne, _super);\n    /**\n     * Create a new belongs to instance.\n     */\n    function MorphOne(model, related, id, type, localKey) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        _this.related = _this.model.relation(related);\n        _this.id = id;\n        _this.type = type;\n        _this.localKey = localKey;\n        return _this;\n    }\n    /**\n     * Define the normalizr schema for the relationship.\n     */\n    MorphOne.prototype.define = function (schema) {\n        return schema.one(this.related);\n    };\n    /**\n     * Attach the relational key to the given data.\n     */\n    MorphOne.prototype.attach = function (key, record, data) {\n        var relatedRecord = data[this.related.entity][key];\n        relatedRecord[this.id] = relatedRecord[this.id] || this.related.getIdFromRecord(record);\n        relatedRecord[this.type] = relatedRecord[this.type] || this.model.entity;\n    };\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    MorphOne.prototype.make = function (value, _parent, _key) {\n        return this.makeOneRelation(value, this.related);\n    };\n    /**\n     * Load the morph many relationship for the record.\n     */\n    MorphOne.prototype.load = function (query, collection, name, constraints) {\n        var _this = this;\n        var relatedQuery = this.getRelation(query, this.related.entity, constraints);\n        this.addEagerConstraintForMorphOne(relatedQuery, collection, query.entity);\n        var relations = this.mapSingleRelations(relatedQuery.get(), this.id);\n        collection.forEach(function (item) {\n            var related = relations.get(item[_this.localKey]);\n            item[name] = related || null;\n        });\n    };\n    /**\n     * Set the constraints for an eager load of the relation.\n     */\n    MorphOne.prototype.addEagerConstraintForMorphOne = function (query, collection, type) {\n        query.whereFk(this.type, type).whereFk(this.id, this.getKeys(collection, this.localKey));\n    };\n    return MorphOne;\n}(Relation));\n\nvar MorphMany = /** @class */ (function (_super) {\n    __extends(MorphMany, _super);\n    /**\n     * Create a new belongs to instance.\n     */\n    function MorphMany(model, related, id, type, localKey) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        _this.related = _this.model.relation(related);\n        _this.id = id;\n        _this.type = type;\n        _this.localKey = localKey;\n        return _this;\n    }\n    /**\n     * Define the normalizr schema for the relationship.\n     */\n    MorphMany.prototype.define = function (schema) {\n        return schema.many(this.related);\n    };\n    /**\n     * Attach the relational key to the given data.\n     */\n    MorphMany.prototype.attach = function (key, record, data) {\n        var _this = this;\n        var relatedItems = data[this.related.entity];\n        key.forEach(function (id) {\n            var relatedItem = relatedItems[id];\n            relatedItem[_this.id] = relatedItem[_this.id] || _this.related.getIdFromRecord(record);\n            relatedItem[_this.type] = relatedItem[_this.type] || _this.model.entity;\n        });\n    };\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    MorphMany.prototype.make = function (value, _parent, _key) {\n        return this.makeManyRelation(value, this.related);\n    };\n    /**\n     * Load the morph many relationship for the record.\n     */\n    MorphMany.prototype.load = function (query, collection, name, constraints) {\n        var _this = this;\n        var relatedQuery = this.getRelation(query, this.related.entity, constraints);\n        this.addEagerConstraintForMorphMany(relatedQuery, collection, query.entity);\n        var relations = this.mapManyRelations(relatedQuery.get(), this.id);\n        collection.forEach(function (item) {\n            var related = relations.get(item[_this.localKey]);\n            item[name] = related || [];\n        });\n    };\n    /**\n     * Set the constraints for an eager load of the relation.\n     */\n    MorphMany.prototype.addEagerConstraintForMorphMany = function (query, collection, type) {\n        query.whereFk(this.type, type).whereFk(this.id, this.getKeys(collection, this.localKey));\n    };\n    return MorphMany;\n}(Relation));\n\nvar MorphToMany = /** @class */ (function (_super) {\n    __extends(MorphToMany, _super);\n    /**\n     * Create a new belongs to instance.\n     */\n    function MorphToMany(model, related, pivot, relatedId, id, type, parentKey, relatedKey) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        /**\n         * The key name of the pivot data.\n         */\n        _this.pivotKey = 'pivot';\n        _this.related = _this.model.relation(related);\n        _this.pivot = _this.model.relation(pivot);\n        _this.relatedId = relatedId;\n        _this.id = id;\n        _this.type = type;\n        _this.parentKey = parentKey;\n        _this.relatedKey = relatedKey;\n        return _this;\n    }\n    /**\n     * Specify the custom pivot accessor to use for the relationship.\n     */\n    MorphToMany.prototype.as = function (accessor) {\n        this.pivotKey = accessor;\n        return this;\n    };\n    /**\n     * Define the normalizr schema for the relationship.\n     */\n    MorphToMany.prototype.define = function (schema) {\n        return schema.many(this.related);\n    };\n    /**\n     * Attach the relational key to the given record. Since morph to many\n     * relationship doesn't have any foreign key, it would do nothing.\n     */\n    MorphToMany.prototype.attach = function (_key, _record, _data) {\n        return;\n    };\n    /**\n     * Convert given value to the appropriate value for the attribute.\n     */\n    MorphToMany.prototype.make = function (value, _parent, _key) {\n        return this.makeManyRelation(value, this.related);\n    };\n    /**\n     * Load the morph to many relationship for the collection.\n     */\n    MorphToMany.prototype.load = function (query, collection, name, constraints) {\n        var _this = this;\n        var relatedQuery = this.getRelation(query, this.related.entity, constraints);\n        var pivotQuery = query.newQuery(this.pivot.entity);\n        this.addEagerConstraintForPivot(pivotQuery, collection, query.entity);\n        var pivots = pivotQuery.get();\n        this.addEagerConstraintForRelated(relatedQuery, pivots);\n        var relateds = this.mapPivotRelations(pivots, relatedQuery);\n        collection.forEach(function (item) {\n            var related = relateds[item[_this.parentKey]];\n            item[name] = related || [];\n        });\n    };\n    /**\n     * Set the constraints for the pivot relation.\n     */\n    MorphToMany.prototype.addEagerConstraintForPivot = function (query, collection, type) {\n        query.whereFk(this.type, type).whereFk(this.id, this.getKeys(collection, this.parentKey));\n    };\n    /**\n     * Set the constraints for the related relation.\n     */\n    MorphToMany.prototype.addEagerConstraintForRelated = function (query, collection) {\n        query.whereFk(this.relatedKey, this.getKeys(collection, this.relatedId));\n    };\n    /**\n     * Create a new indexed map for the pivot relation.\n     */\n    MorphToMany.prototype.mapPivotRelations = function (pivots, relatedQuery) {\n        var _this = this;\n        var relations = this.mapManyRelations(relatedQuery.get(), this.relatedKey);\n        if (relatedQuery.orders.length) {\n            return this.mapRelationsByOrders(pivots, relations, this.id, this.relatedId);\n        }\n        return pivots.reduce(function (records, record) {\n            var id = record[_this.id];\n            if (!records[id]) {\n                records[id] = [];\n            }\n            var related = relations.get(record[_this.relatedId]);\n            /* istanbul ignore if */\n            if (related === undefined || related.length === 0) {\n                return records;\n            }\n            records[id] = records[id].concat(related.map(function (model) {\n                model[_this.pivotKey] = record;\n                return model;\n            }));\n            return records;\n        }, {});\n    };\n    /**\n     * Create pivot records for the given records if needed.\n     */\n    MorphToMany.prototype.createPivots = function (parent, data, key) {\n        var _this = this;\n        Utils.forOwn(data[parent.entity], function (record) {\n            var relatedIds = parent.query().newQuery(_this.pivot.entity)\n                .where(_this.id, record[_this.parentKey])\n                .where(_this.type, parent.entity)\n                .get();\n            var relateds = (record[key] || []).filter(function (relatedId) { return !relatedIds.includes(relatedId); });\n            if (!Utils.isArray(relateds) || relateds.length === 0) {\n                return;\n            }\n            _this.createPivotRecord(parent, data, record, relateds);\n        });\n        return data;\n    };\n    /**\n     * Create a pivot record.\n     */\n    MorphToMany.prototype.createPivotRecord = function (parent, data, record, related) {\n        var _this = this;\n        related.forEach(function (id) {\n            var _a, _b;\n            var parentId = record[_this.parentKey];\n            var relatedId = data[_this.related.entity][id][_this.relatedKey];\n            var pivotKey = parentId + \"_\" + id + \"_\" + parent.entity;\n            var pivotData = data[_this.related.entity][id][_this.pivotKey] || {};\n            data[_this.pivot.entity] = __assign(__assign({}, data[_this.pivot.entity]), (_a = {}, _a[pivotKey] = __assign(__assign({}, pivotData), (_b = { $id: pivotKey }, _b[_this.relatedId] = relatedId, _b[_this.id] = parentId, _b[_this.type] = parent.entity, _b)), _a));\n        });\n    };\n    return MorphToMany;\n}(Relation));\n\nvar MorphedByMany = /** @class */ (function (_super) {\n    __extends(MorphedByMany, _super);\n    /**\n     * Create a new belongs to instance.\n     */\n    function MorphedByMany(model, related, pivot, relatedId, id, type, parentKey, relatedKey) {\n        var _this = _super.call(this, model) /* istanbul ignore next */ || this;\n        /**\n         * The key name of the pivot data.\n         */\n        _this.pivotKey = 'pivot';\n        _this.related = _this.model.relation(related);\n        _this.pivot = _this.model.relation(pivot);\n        _this.relatedId = relatedId;\n        _this.id = id;\n        _this.type = type;\n        _this.parentKey = parentKey;\n        _this.relatedKey = relatedKey;\n        return _this;\n    }\n    /**\n     * Specify the custom pivot accessor to use for the relationship.\n     */\n    MorphedByMany.prototype.as = function (accessor) {\n        this.pivotKey = accessor;\n        return this;\n    };\n    /**\n     * Define the normalizr schema for the relationship.\n     */\n    MorphedByMany.prototype.define = function (schema) {\n        return schema.many(this.related);\n    };\n    /**\n     * Attach the relational key to the given data. Since morphed by many\n     * relationship doesn't have any foreign key, it would do nothing.\n     */\n    MorphedByMany.prototype.attach = function (_key, _record, _data) {\n        return;\n    };\n    /**\n     * Make value to be set to model property. This method is used when\n     * instantiating a model or creating a plain object from a model.\n     */\n    MorphedByMany.prototype.make = function (value, _parent, _key) {\n        return this.makeManyRelation(value, this.related);\n    };\n    /**\n     * Load the morph many relationship for the record.\n     */\n    MorphedByMany.prototype.load = function (query, collection, name, constraints) {\n        var _this = this;\n        var relatedQuery = this.getRelation(query, this.related.entity, constraints);\n        var pivotQuery = query.newQuery(this.pivot.entity);\n        this.addEagerConstraintForPivot(pivotQuery, collection, this.related.entity);\n        var pivots = pivotQuery.get();\n        this.addEagerConstraintForRelated(relatedQuery, pivots);\n        var relateds = this.mapPivotRelations(pivots, relatedQuery);\n        collection.forEach(function (item) {\n            var related = relateds[item[_this.parentKey]];\n            item[name] = related || [];\n        });\n    };\n    /**\n     * Set the constraints for the pivot relation.\n     */\n    MorphedByMany.prototype.addEagerConstraintForPivot = function (query, collection, type) {\n        query.whereFk(this.type, type).whereFk(this.relatedId, this.getKeys(collection, this.parentKey));\n    };\n    /**\n     * Set the constraints for the related relation.\n     */\n    MorphedByMany.prototype.addEagerConstraintForRelated = function (query, collection) {\n        query.whereFk(this.relatedKey, this.getKeys(collection, this.id));\n    };\n    /**\n     * Create a new indexed map for the pivot relation.\n     */\n    MorphedByMany.prototype.mapPivotRelations = function (pivots, relatedQuery) {\n        var _this = this;\n        var relations = this.mapManyRelations(relatedQuery.get(), this.relatedKey);\n        if (relatedQuery.orders.length) {\n            return this.mapRelationsByOrders(pivots, relations, this.relatedId, this.id);\n        }\n        return pivots.reduce(function (records, record) {\n            var id = record[_this.relatedId];\n            if (!records[id]) {\n                records[id] = [];\n            }\n            var related = relations.get(record[_this.id]);\n            /* istanbul ignore if */\n            if (related === undefined || related.length === 0) {\n                return records;\n            }\n            records[id] = records[id].concat(related.map(function (model) {\n                model[_this.pivotKey] = record;\n                return model;\n            }));\n            return records;\n        }, {});\n    };\n    /**\n     * Create pivot records for the given records if needed.\n     */\n    MorphedByMany.prototype.createPivots = function (parent, data, key) {\n        var _this = this;\n        Utils.forOwn(data[parent.entity], function (record) {\n            var related = record[key];\n            if (!Utils.isArray(related)) {\n                return;\n            }\n            _this.createPivotRecord(data, record, related);\n        });\n        return data;\n    };\n    /**\n     * Create a pivot record.\n     */\n    MorphedByMany.prototype.createPivotRecord = function (data, record, related) {\n        var _this = this;\n        related.forEach(function (id) {\n            var _a, _b;\n            var parentId = record[_this.parentKey];\n            var pivotKey = id + \"_\" + parentId + \"_\" + _this.related.entity;\n            var pivotData = data[_this.related.entity][id][_this.pivotKey] || {};\n            data[_this.pivot.entity] = __assign(__assign({}, data[_this.pivot.entity]), (_a = {}, _a[pivotKey] = __assign(__assign({}, pivotData), (_b = { $id: pivotKey }, _b[_this.relatedId] = parentId, _b[_this.id] = _this.model.getIdFromRecord(data[_this.related.entity][id]), _b[_this.type] = _this.related.entity, _b)), _a));\n        });\n    };\n    return MorphedByMany;\n}(Relation));\n\nvar defaultOption = {\n    relations: true\n};\n/**\n * Serialize the given model to attributes. This method will ignore\n * relationships, and it includes the index id.\n */\nfunction toAttributes(model) {\n    var record = toJson(model, { relations: false });\n    record.$id = model.$id;\n    return record;\n}\n/**\n * Serialize given model POJO.\n */\nfunction toJson(model, option) {\n    if (option === void 0) { option = {}; }\n    option = __assign(__assign({}, defaultOption), option);\n    var record = {};\n    var fields = model.$fields();\n    for (var key in fields) {\n        var f = fields[key];\n        var v = model[key];\n        if (f instanceof Relation) {\n            record[key] = option.relations ? relation(v) : emptyRelation(v);\n            continue;\n        }\n        record[key] = value(model[key]);\n    }\n    return record;\n}\n/**\n * Serialize given value.\n */\nfunction value(v) {\n    if (v === null) {\n        return null;\n    }\n    if (isArray(v)) {\n        return array(v);\n    }\n    if (typeof v === 'object') {\n        return object(v);\n    }\n    return v;\n}\n/**\n * Serialize an array into json.\n */\nfunction array(a) {\n    return a.map(function (v) { return value(v); });\n}\n/**\n * Serialize an object into json.\n */\nfunction object(o) {\n    var obj = {};\n    for (var key in o) {\n        obj[key] = value(o[key]);\n    }\n    return obj;\n}\nfunction relation(relation) {\n    if (relation === null) {\n        return null;\n    }\n    if (isArray(relation)) {\n        return relation.map(function (model) { return model.$toJson(); });\n    }\n    return relation.$toJson();\n}\nfunction emptyRelation(relation) {\n    return isArray(relation) ? [] : null;\n}\n\nvar Model = /** @class */ (function () {\n    /**\n     * Create a new model instance.\n     */\n    function Model(record) {\n        /**\n         * The index ID for the model.\n         */\n        this.$id = null;\n        this.$fill(record);\n    }\n    /**\n     * The definition of the fields of the model and its relations.\n     */\n    Model.fields = function () {\n        return {};\n    };\n    /**\n     * Create an attr attribute.\n     */\n    Model.attr = function (value, mutator) {\n        return new Attr(this, value, mutator);\n    };\n    /**\n     * Create a string attribute.\n     */\n    Model.string = function (value, mutator) {\n        return new String$1(this, value, mutator);\n    };\n    /**\n     * Create a number attribute.\n     */\n    Model.number = function (value, mutator) {\n        return new Number(this, value, mutator);\n    };\n    /**\n     * Create a boolean attribute.\n     */\n    Model.boolean = function (value, mutator) {\n        return new Boolean(this, value, mutator);\n    };\n    /**\n     * Create an uid attribute.\n     */\n    Model.uid = function (value) {\n        return new Uid$1(this, value);\n    };\n    /**\n     * @deprecated Use `uid` attribute instead.\n     */\n    Model.increment = function () {\n        /* istanbul ignore next */\n        if (true) {\n            console.warn('[Vuex ORM] Attribute type `increment` has been deprecated and replaced with `uid`.');\n        }\n        return this.uid();\n    };\n    /**\n     * Create a has one relationship.\n     */\n    Model.hasOne = function (related, foreignKey, localKey) {\n        return new HasOne(this, related, foreignKey, this.localKey(localKey));\n    };\n    /**\n     * Create a belongs to relationship.\n     */\n    Model.belongsTo = function (parent, foreignKey, ownerKey) {\n        return new BelongsTo(this, parent, foreignKey, this.relation(parent).localKey(ownerKey));\n    };\n    /**\n     * Create a has many relationship.\n     */\n    Model.hasMany = function (related, foreignKey, localKey) {\n        return new HasMany(this, related, foreignKey, this.localKey(localKey));\n    };\n    /**\n     * Create a has many by relationship.\n     */\n    Model.hasManyBy = function (parent, foreignKey, ownerKey) {\n        return new HasManyBy(this, parent, foreignKey, this.relation(parent).localKey(ownerKey));\n    };\n    /**\n     * Create a has many through relationship.\n     */\n    Model.hasManyThrough = function (related, through, firstKey, secondKey, localKey, secondLocalKey) {\n        return new HasManyThrough(this, related, through, firstKey, secondKey, this.localKey(localKey), this.relation(through).localKey(secondLocalKey));\n    };\n    /**\n     * Create a belongs to many relationship.\n     */\n    Model.belongsToMany = function (related, pivot, foreignPivotKey, relatedPivotKey, parentKey, relatedKey) {\n        return new BelongsToMany(this, related, pivot, foreignPivotKey, relatedPivotKey, this.localKey(parentKey), this.relation(related).localKey(relatedKey));\n    };\n    /**\n     * Create a morph to relationship.\n     */\n    Model.morphTo = function (id, type) {\n        return new MorphTo(this, id, type);\n    };\n    /**\n     * Create a morph one relationship.\n     */\n    Model.morphOne = function (related, id, type, localKey) {\n        return new MorphOne(this, related, id, type, this.localKey(localKey));\n    };\n    /**\n     * Create a morph many relationship.\n     */\n    Model.morphMany = function (related, id, type, localKey) {\n        return new MorphMany(this, related, id, type, this.localKey(localKey));\n    };\n    /**\n     * Create a morph to many relationship.\n     */\n    Model.morphToMany = function (related, pivot, relatedId, id, type, parentKey, relatedKey) {\n        return new MorphToMany(this, related, pivot, relatedId, id, type, this.localKey(parentKey), this.relation(related).localKey(relatedKey));\n    };\n    /**\n     * Create a morphed by many relationship.\n     */\n    Model.morphedByMany = function (related, pivot, relatedId, id, type, parentKey, relatedKey) {\n        return new MorphedByMany(this, related, pivot, relatedId, id, type, this.localKey(parentKey), this.relation(related).localKey(relatedKey));\n    };\n    /**\n     * Mutators to mutate matching fields when instantiating the model.\n     */\n    Model.mutators = function () {\n        return {};\n    };\n    /**\n     * Types mapping used to dispatch entities based on their discriminator field\n     */\n    Model.types = function () {\n        return {};\n    };\n    /**\n     * Get the store instance from the container.\n     */\n    Model.store = function () {\n        return Container.store;\n    };\n    /**\n     * Get the database instance from store.\n     */\n    Model.database = function () {\n        return this.store().$db();\n    };\n    /**\n     * Create a namespaced method name for Vuex Module from the given\n     * method name.\n     */\n    Model.namespace = function (method) {\n        return this.database().namespace + \"/\" + this.entity + \"/\" + method;\n    };\n    /**\n     * Call Vuex Getters.\n     */\n    Model.getters = function (method) {\n        return this.store().getters[this.namespace(method)];\n    };\n    /**\n     * Dispatch Vuex Action.\n     */\n    Model.dispatch = function (method, payload) {\n        return this.store().dispatch(this.namespace(method), payload);\n    };\n    /**\n     * Commit Vuex Mutation.\n     */\n    Model.commit = function (callback) {\n        this.store().commit(this.database().namespace + \"/$mutate\", {\n            entity: this.entity,\n            callback: callback\n        });\n    };\n    /**\n     * Get the Model schema definition from the cache.\n     */\n    Model.getFields = function () {\n        if (!this.cachedFields) {\n            this.cachedFields = {};\n        }\n        if (this.cachedFields[this.entity]) {\n            return this.cachedFields[this.entity];\n        }\n        this.cachedFields[this.entity] = this.fields();\n        return this.cachedFields[this.entity];\n    };\n    /**\n     * Get all records.\n     */\n    Model.all = function () {\n        return this.getters('all')();\n    };\n    /**\n     * Find a record.\n     */\n    Model.find = function (id) {\n        return this.getters('find')(id);\n    };\n    /**\n     * Get the record of the given array of ids.\n     */\n    Model.findIn = function (idList) {\n        return this.getters('findIn')(idList);\n    };\n    /**\n     * Get query instance.\n     */\n    Model.query = function () {\n        return this.getters('query')();\n    };\n    /**\n     * Check wether the associated database contains data.\n     */\n    Model.exists = function () {\n        return this.query().exists();\n    };\n    /**\n     * Create new data with all fields filled by default values.\n     */\n    Model.new = function () {\n        return this.dispatch('new');\n    };\n    /**\n     * Save given data to the store by replacing all existing records in the\n     * store. If you want to save data without replacing existing records,\n     * use the `insert` method instead.\n     */\n    Model.create = function (payload) {\n        return this.dispatch('create', payload);\n    };\n    /**\n     * Insert records.\n     */\n    Model.insert = function (payload) {\n        return this.dispatch('insert', payload);\n    };\n    /**\n     * Update records.\n     */\n    Model.update = function (payload) {\n        return this.dispatch('update', payload);\n    };\n    /**\n     * Insert or update records.\n     */\n    Model.insertOrUpdate = function (payload) {\n        return this.dispatch('insertOrUpdate', payload);\n    };\n    Model.delete = function (payload) {\n        return this.dispatch('delete', payload);\n    };\n    /**\n     * Delete all records from the store.\n     */\n    Model.deleteAll = function () {\n        return this.dispatch('deleteAll');\n    };\n    /**\n     * Check if the given key is the primary key. If the model has composite\n     * primary key, this method is going to check if the given key is included\n     * in the composite key.\n     */\n    Model.isPrimaryKey = function (key) {\n        if (!Utils.isArray(this.primaryKey)) {\n            return this.primaryKey === key;\n        }\n        return this.primaryKey.includes(key);\n    };\n    /**\n     * Check if the primary key is a composite key.\n     */\n    Model.isCompositePrimaryKey = function () {\n        return Utils.isArray(this.primaryKey);\n    };\n    /**\n     * Get the id (value of primary key) from teh given record. If primary key is\n     * not present, or it is invalid primary key value, which is other than\n     * `string` or `number`, it's going to return `null`.\n     *\n     * If the model has composite key, it's going to return array of ids. If any\n     * composite key missing, it will return `null`.\n     */\n    Model.getIdFromRecord = function (record) {\n        var _this = this;\n        var key = this.primaryKey;\n        if (typeof key === 'string') {\n            return this.getIdFromValue(record[key]);\n        }\n        var ids = key.reduce(function (keys, k) {\n            var id = _this.getIdFromValue(record[k]);\n            id !== null && keys.push(id);\n            return keys;\n        }, []);\n        return ids.length === key.length ? ids : null;\n    };\n    /**\n     * Get correct index id, which is `string` | `number`, from the given value.\n     */\n    Model.getIdFromValue = function (value) {\n        if (typeof value === 'string' && value !== '') {\n            return value;\n        }\n        if (typeof value === 'number') {\n            return value;\n        }\n        return null;\n    };\n    /**\n     * Get the index ID value from the given record. An index ID is a value that\n     * used as a key for records within the Vuex Store.\n     *\n     * Most of the time, it's same as the value for the Model's primary key but\n     * it's always `string`, even if the primary key value is `number`.\n     *\n     * If the Model has a composite primary key, each value corresponding to\n     * those primary key will be stringified and become a single string value\n     * such as `'[1,2]'`.\n     *\n     * If the primary key is not present at the given record, it returns `null`.\n     * For the composite primary key, every key must exist at a given record,\n     * or it will return `null`.\n     */\n    Model.getIndexIdFromRecord = function (record) {\n        var id = this.getIdFromRecord(record);\n        if (id === null) {\n            return null;\n        }\n        if (Utils.isArray(id)) {\n            return JSON.stringify(id);\n        }\n        return String(id);\n    };\n    /**\n     * Get local key to pass to the attributes.\n     */\n    Model.localKey = function (key) {\n        if (key) {\n            return key;\n        }\n        return typeof this.primaryKey === 'string' ? this.primaryKey : 'id';\n    };\n    /**\n     * Get the model object that matches the given record type. The method is for\n     * getting the correct model object when the model has any inheritance\n     * children model.\n     *\n     * For example, if a User Model have `static types()` declared, and if you\n     * pass record with `{ type: 'admin' }`, then the method will likely to\n     * return SuperUser class.\n     */\n    Model.getModelFromRecord = function (record) {\n        // If the given record is already a model instance, return the\n        // model object.\n        if (record instanceof this) {\n            return record.$self();\n        }\n        // Else, get the corresponding model for the type value if there's any.\n        return this.getTypeModel(record[this.typeKey]);\n    };\n    /**\n     * Get a model from the container.\n     */\n    Model.relation = function (model) {\n        if (typeof model !== 'string') {\n            return model;\n        }\n        return this.database().model(model);\n    };\n    /**\n     * Get all `belongsToMany` fields from the schema.\n     */\n    Model.pivotFields = function () {\n        var fields = [];\n        Utils.forOwn(this.getFields(), function (field, key) {\n            var _a;\n            if (field instanceof BelongsToMany || field instanceof MorphToMany || field instanceof MorphedByMany) {\n                fields.push((_a = {}, _a[key] = field, _a));\n            }\n        });\n        return fields;\n    };\n    /**\n     * Check if fields contains the `belongsToMany` field type.\n     */\n    Model.hasPivotFields = function () {\n        return this.pivotFields().length > 0;\n    };\n    /**\n     * Check if the current model has a type definition\n     */\n    Model.hasTypes = function () {\n        return Object.keys(this.types()).length > 0;\n    };\n    /**\n     * Get the model corresponding to the given type name. If it can't be found,\n     * it'll return `null`.\n     */\n    Model.getTypeModel = function (name) {\n        var model = this.types()[name];\n        if (!model) {\n            return null;\n        }\n        return model;\n    };\n    /**\n     * Given a Model, this returns the corresponding key in the InheritanceTypes mapping\n     */\n    Model.getTypeKeyValueFromModel = function (model) {\n        var modelToCheck = model || this;\n        var types = this.types();\n        for (var type in types) {\n            if (types[type].entity === modelToCheck.entity) {\n                return type;\n            }\n        }\n        return null;\n    };\n    /**\n     * Tries to find a Relation field in all types defined in the InheritanceTypes mapping\n     */\n    Model.findRelationInSubTypes = function (relationName) {\n        var types = this.types();\n        for (var type in types) {\n            var fields = types[type].getFields();\n            for (var fieldName in fields) {\n                if (fieldName === relationName && fields[fieldName] instanceof Relation) {\n                    return fields[fieldName];\n                }\n            }\n        }\n        return null;\n    };\n    /**\n     * Fill any missing fields in the given record with the default value defined\n     * in the model schema.\n     */\n    Model.hydrate = function (record) {\n        return (new this(record)).$getAttributes();\n    };\n    /**\n     * Get the constructor of this model.\n     */\n    Model.prototype.$self = function () {\n        return this.constructor;\n    };\n    /**\n     * Get the primary key for the model.\n     */\n    Model.prototype.$primaryKey = function () {\n        return this.$self().primaryKey;\n    };\n    /**\n     * The definition of the fields of the model and its relations.\n     */\n    Model.prototype.$fields = function () {\n        return this.$self().getFields();\n    };\n    /**\n     * Set index id.\n     */\n    Model.prototype.$setIndexId = function (id) {\n        this.$id = id;\n        return this;\n    };\n    /**\n     * Get the store instance from the container.\n     */\n    Model.prototype.$store = function () {\n        return this.$self().store();\n    };\n    /**\n     * Create a namespaced method name for Vuex Module from the given\n     * method name.\n     */\n    Model.prototype.$namespace = function (method) {\n        return this.$self().namespace(method);\n    };\n    /**\n     * Call Vuex Getetrs.\n     */\n    Model.prototype.$getters = function (method) {\n        return this.$self().getters(method);\n    };\n    /**\n     * Dispatch Vuex Action.\n     */\n    Model.prototype.$dispatch = function (method, payload) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.$self().dispatch(method, payload)];\n            });\n        });\n    };\n    /**\n     * Get all records.\n     */\n    Model.prototype.$all = function () {\n        return this.$getters('all')();\n    };\n    /**\n     * Find a record.\n     */\n    Model.prototype.$find = function (id) {\n        return this.$getters('find')(id);\n    };\n    /**\n     * Find record of the given array of ids.\n     */\n    Model.prototype.$findIn = function (idList) {\n        return this.$getters('findIn')(idList);\n    };\n    /**\n     * Get query instance.\n     */\n    Model.prototype.$query = function () {\n        return this.$getters('query')();\n    };\n    /**\n     * Create records.\n     */\n    Model.prototype.$create = function (payload) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.$dispatch('create', payload)];\n            });\n        });\n    };\n    /**\n     * Create records.\n     */\n    Model.prototype.$insert = function (payload) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.$dispatch('insert', payload)];\n            });\n        });\n    };\n    /**\n     * Update records.\n     */\n    Model.prototype.$update = function (payload) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (Utils.isArray(payload)) {\n                    return [2 /*return*/, this.$dispatch('update', payload)];\n                }\n                if (payload.where !== undefined) {\n                    return [2 /*return*/, this.$dispatch('update', payload)];\n                }\n                if (this.$self().getIndexIdFromRecord(payload) === null) {\n                    return [2 /*return*/, this.$dispatch('update', {\n                            where: this.$self().getIdFromRecord(this),\n                            data: payload\n                        })];\n                }\n                return [2 /*return*/, this.$dispatch('update', payload)];\n            });\n        });\n    };\n    /**\n     * Insert or update records.\n     */\n    Model.prototype.$insertOrUpdate = function (payload) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.$dispatch('insertOrUpdate', payload)];\n            });\n        });\n    };\n    /**\n     * Save record.\n     */\n    Model.prototype.$save = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var fields, record, records;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        fields = this.$self().getFields();\n                        record = Object.keys(fields).reduce(function (record, key) {\n                            if (fields[key] instanceof Type) {\n                                record[key] = _this[key];\n                            }\n                            return record;\n                        }, {});\n                        return [4 /*yield*/, this.$dispatch('insertOrUpdate', { data: record })];\n                    case 1:\n                        records = _a.sent();\n                        this.$fill(records[this.$self().entity][0]);\n                        return [2 /*return*/, this];\n                }\n            });\n        });\n    };\n    /**\n     * Delete records that matches the given condition.\n     */\n    Model.prototype.$delete = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var primaryKey;\n            var _this = this;\n            return __generator(this, function (_a) {\n                primaryKey = this.$primaryKey();\n                if (!Utils.isArray(primaryKey)) {\n                    return [2 /*return*/, this.$dispatch('delete', this[primaryKey])];\n                }\n                return [2 /*return*/, this.$dispatch('delete', function (model) {\n                        return primaryKey.every(function (id) { return model[id] === _this[id]; });\n                    })];\n            });\n        });\n    };\n    /**\n     * Delete all records.\n     */\n    Model.prototype.$deleteAll = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.$dispatch('deleteAll')];\n            });\n        });\n    };\n    /**\n     * Fill the model instance with the given record. If no record were passed,\n     * or if the record has any missing fields, each value of the fields will\n     * be filled with its default value defined at model fields definition.\n     */\n    Model.prototype.$fill = function (record) {\n        if (record === void 0) { record = {}; }\n        var fields = this.$fields();\n        for (var key in fields) {\n            var field = fields[key];\n            var value = record[key];\n            this[key] = field.make(value, record, key);\n        }\n        // If the record contains index id, set it to the model.\n        record.$id !== undefined && this.$setIndexId(record.$id);\n    };\n    /**\n     * Generate missing primary ids and index id.\n     */\n    Model.prototype.$generateId = function () {\n        return this.$generatePrimaryId().$generateIndexId();\n    };\n    /**\n     * Generate any missing primary ids.\n     */\n    Model.prototype.$generatePrimaryId = function () {\n        var _this = this;\n        var key = this.$self().primaryKey;\n        var keys = Utils.isArray(key) ? key : [key];\n        keys.forEach(function (k) {\n            if (_this[k] === undefined || _this[k] === null) {\n                _this[k] = Uid.make();\n            }\n        });\n        return this;\n    };\n    /**\n     * Generate index id from current model attributes.\n     */\n    Model.prototype.$generateIndexId = function () {\n        return this.$setIndexId(this.$getIndexIdFromAttributes());\n    };\n    /**\n     * Get index id based on current model attributes.\n     */\n    Model.prototype.$getIndexIdFromAttributes = function () {\n        return this.$self().getIndexIdFromRecord(this);\n    };\n    /**\n     * Get all of the current attributes on the model. It includes index id\n     * value as well. This method is mainly used when saving a model to\n     * the store.\n     */\n    Model.prototype.$getAttributes = function () {\n        return toAttributes(this);\n    };\n    /**\n     * Serialize field values into json.\n     */\n    Model.prototype.$toJson = function () {\n        return toJson(this);\n    };\n    /**\n     * The primary key to be used for the model.\n     */\n    Model.primaryKey = 'id';\n    /**\n     * The discriminator key to be used for the model when inheritance is used\n     */\n    Model.typeKey = 'type';\n    /**\n     * Vuex Store state definition.\n     */\n    Model.state = {};\n    return Model;\n}());\n\n/**\n * Create a new Query instance.\n */\nvar query = function (state, _getters, _rootState, rootGetters) { return function () {\n    return rootGetters[state.$connection + \"/query\"](state.$name);\n}; };\n/**\n * Get all data of given entity.\n */\nvar all = function (state, _getters, _rootState, rootGetters) { return function () {\n    return rootGetters[state.$connection + \"/all\"](state.$name);\n}; };\n/**\n * Find a data of the given entity by given id.\n */\nvar find = function (state, _getters, _rootState, rootGetters) { return function (id) {\n    return rootGetters[state.$connection + \"/find\"](state.$name, id);\n}; };\n/**\n * Find array of data of the given entity by given ids.\n */\nvar findIn = function (state, _getters, _rootState, rootGetters) { return function (idList) {\n    return rootGetters[state.$connection + \"/findIn\"](state.$name, idList);\n}; };\nvar Getters = {\n    query: query,\n    all: all,\n    find: find,\n    findIn: findIn\n};\n\n/**\n * Create new data with all fields filled by default values.\n */\nfunction newRecord(context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var state, entity;\n        return __generator(this, function (_a) {\n            state = context.state;\n            entity = state.$name;\n            return [2 /*return*/, context.dispatch(state.$connection + \"/new\", { entity: entity }, { root: true })];\n        });\n    });\n}\n/**\n * Save given data to the store by replacing all existing records in the\n * store. If you want to save data without replacing existing records,\n * use the `insert` method instead.\n */\nfunction create(context, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n        var state, entity;\n        return __generator(this, function (_a) {\n            state = context.state;\n            entity = state.$name;\n            return [2 /*return*/, context.dispatch(state.$connection + \"/create\", __assign(__assign({}, payload), { entity: entity }), { root: true })];\n        });\n    });\n}\n/**\n * Insert given data to the state. Unlike `create`, this method will not\n * remove existing data within the state, but it will update the data\n * with the same primary key.\n */\nfunction insert(context, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n        var state, entity;\n        return __generator(this, function (_a) {\n            state = context.state;\n            entity = state.$name;\n            return [2 /*return*/, context.dispatch(state.$connection + \"/insert\", __assign(__assign({}, payload), { entity: entity }), { root: true })];\n        });\n    });\n}\n/**\n * Update data in the store.\n */\nfunction update(context, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n        var state, entity;\n        return __generator(this, function (_a) {\n            state = context.state;\n            entity = state.$name;\n            // If the payload is an array, then the payload should be an array of\n            // data so let's pass the whole payload as data.\n            if (isArray(payload)) {\n                return [2 /*return*/, context.dispatch(state.$connection + \"/update\", { entity: entity, data: payload }, { root: true })];\n            }\n            // If the payload doesn't have `data` property, we'll assume that\n            // the user has passed the object as the payload so let's define\n            // the whole payload as a data.\n            if (payload.data === undefined) {\n                return [2 /*return*/, context.dispatch(state.$connection + \"/update\", { entity: entity, data: payload }, { root: true })];\n            }\n            // Else destructure the payload and let root action handle it.\n            return [2 /*return*/, context.dispatch(state.$connection + \"/update\", __assign({ entity: entity }, payload), { root: true })];\n        });\n    });\n}\n/**\n * Insert or update given data to the state. Unlike `insert`, this method\n * will not replace existing data within the state, but it will update only\n * the submitted data with the same primary key.\n */\nfunction insertOrUpdate(context, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n        var state, entity;\n        return __generator(this, function (_a) {\n            state = context.state;\n            entity = state.$name;\n            return [2 /*return*/, context.dispatch(state.$connection + \"/insertOrUpdate\", __assign({ entity: entity }, payload), { root: true })];\n        });\n    });\n}\nfunction destroy(context, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n        var state, entity, where;\n        return __generator(this, function (_a) {\n            state = context.state;\n            entity = state.$name;\n            where = payload;\n            return [2 /*return*/, context.dispatch(state.$connection + \"/delete\", { entity: entity, where: where }, { root: true })];\n        });\n    });\n}\n/**\n * Delete all data from the store.\n */\nfunction deleteAll(context) {\n    return __awaiter(this, void 0, void 0, function () {\n        var state, entity;\n        return __generator(this, function (_a) {\n            state = context.state;\n            entity = state.$name;\n            return [2 /*return*/, context.dispatch(state.$connection + \"/deleteAll\", { entity: entity }, { root: true })];\n        });\n    });\n}\nvar Actions = {\n    new: newRecord,\n    create: create,\n    insert: insert,\n    update: update,\n    insertOrUpdate: insertOrUpdate,\n    delete: destroy,\n    deleteAll: deleteAll\n};\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\n/**\n * Helpers to enable Immutable compatibility *without* bringing in\n * the 'immutable' package as a dependency.\n */\n\n/**\n * Check if an object is immutable by checking if it has a key specific\n * to the immutable library.\n *\n * @param  {any} object\n * @return {bool}\n */\nfunction isImmutable(object) {\n  return !!(object && typeof object.hasOwnProperty === 'function' && (object.hasOwnProperty('__ownerID') || // Immutable.Map\n  object._map && object._map.hasOwnProperty('__ownerID'))); // Immutable.Record\n}\n/**\n * Denormalize an immutable entity.\n *\n * @param  {Schema} schema\n * @param  {Immutable.Map|Immutable.Record} input\n * @param  {function} unvisit\n * @param  {function} getDenormalizedEntity\n * @return {Immutable.Map|Immutable.Record}\n */\n\nfunction denormalizeImmutable(schema, input, unvisit) {\n  return Object.keys(schema).reduce(function (object, key) {\n    // Immutable maps cast keys to strings on write so we need to ensure\n    // we're accessing them using string keys.\n    var stringKey = \"\" + key;\n\n    if (object.has(stringKey)) {\n      return object.set(stringKey, unvisit(object.get(stringKey), schema[stringKey]));\n    } else {\n      return object;\n    }\n  }, input);\n}\n\nvar getDefaultGetId = function getDefaultGetId(idAttribute) {\n  return function (input) {\n    return isImmutable(input) ? input.get(idAttribute) : input[idAttribute];\n  };\n};\n\nvar EntitySchema =\n/*#__PURE__*/\nfunction () {\n  function EntitySchema(key, definition, options) {\n    if (definition === void 0) {\n      definition = {};\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (!key || typeof key !== 'string') {\n      throw new Error(\"Expected a string key for Entity, but found \" + key + \".\");\n    }\n\n    var _options = options,\n        _options$idAttribute = _options.idAttribute,\n        idAttribute = _options$idAttribute === void 0 ? 'id' : _options$idAttribute,\n        _options$mergeStrateg = _options.mergeStrategy,\n        mergeStrategy = _options$mergeStrateg === void 0 ? function (entityA, entityB) {\n      return _extends({}, entityA, entityB);\n    } : _options$mergeStrateg,\n        _options$processStrat = _options.processStrategy,\n        processStrategy = _options$processStrat === void 0 ? function (input) {\n      return _extends({}, input);\n    } : _options$processStrat,\n        _options$fallbackStra = _options.fallbackStrategy,\n        fallbackStrategy = _options$fallbackStra === void 0 ? function (key, schema) {\n      return undefined;\n    } : _options$fallbackStra;\n    this._key = key;\n    this._getId = typeof idAttribute === 'function' ? idAttribute : getDefaultGetId(idAttribute);\n    this._idAttribute = idAttribute;\n    this._mergeStrategy = mergeStrategy;\n    this._processStrategy = processStrategy;\n    this._fallbackStrategy = fallbackStrategy;\n    this.define(definition);\n  }\n\n  var _proto = EntitySchema.prototype;\n\n  _proto.define = function define(definition) {\n    this.schema = Object.keys(definition).reduce(function (entitySchema, key) {\n      var _extends2;\n\n      var schema = definition[key];\n      return _extends({}, entitySchema, (_extends2 = {}, _extends2[key] = schema, _extends2));\n    }, this.schema || {});\n  };\n\n  _proto.getId = function getId(input, parent, key) {\n    return this._getId(input, parent, key);\n  };\n\n  _proto.merge = function merge(entityA, entityB) {\n    return this._mergeStrategy(entityA, entityB);\n  };\n\n  _proto.fallback = function fallback(id, schema) {\n    return this._fallbackStrategy(id, schema);\n  };\n\n  _proto.normalize = function normalize(input, parent, key, visit, addEntity, visitedEntities) {\n    var _this = this;\n\n    var id = this.getId(input, parent, key);\n    var entityType = this.key;\n\n    if (!(entityType in visitedEntities)) {\n      visitedEntities[entityType] = {};\n    }\n\n    if (!(id in visitedEntities[entityType])) {\n      visitedEntities[entityType][id] = [];\n    }\n\n    if (visitedEntities[entityType][id].some(function (entity) {\n      return entity === input;\n    })) {\n      return id;\n    }\n\n    visitedEntities[entityType][id].push(input);\n\n    var processedEntity = this._processStrategy(input, parent, key);\n\n    Object.keys(this.schema).forEach(function (key) {\n      if (processedEntity.hasOwnProperty(key) && typeof processedEntity[key] === 'object') {\n        var schema = _this.schema[key];\n        var resolvedSchema = typeof schema === 'function' ? schema(input) : schema;\n        processedEntity[key] = visit(processedEntity[key], processedEntity, key, resolvedSchema, addEntity, visitedEntities);\n      }\n    });\n    addEntity(this, processedEntity, input, parent, key);\n    return id;\n  };\n\n  _proto.denormalize = function denormalize(entity, unvisit) {\n    var _this2 = this;\n\n    if (isImmutable(entity)) {\n      return denormalizeImmutable(this.schema, entity, unvisit);\n    }\n\n    Object.keys(this.schema).forEach(function (key) {\n      if (entity.hasOwnProperty(key)) {\n        var schema = _this2.schema[key];\n        entity[key] = unvisit(entity[key], schema);\n      }\n    });\n    return entity;\n  };\n\n  _createClass(EntitySchema, [{\n    key: \"key\",\n    get: function get() {\n      return this._key;\n    }\n  }, {\n    key: \"idAttribute\",\n    get: function get() {\n      return this._idAttribute;\n    }\n  }]);\n\n  return EntitySchema;\n}();\n\nvar PolymorphicSchema =\n/*#__PURE__*/\nfunction () {\n  function PolymorphicSchema(definition, schemaAttribute) {\n    if (schemaAttribute) {\n      this._schemaAttribute = typeof schemaAttribute === 'string' ? function (input) {\n        return input[schemaAttribute];\n      } : schemaAttribute;\n    }\n\n    this.define(definition);\n  }\n\n  var _proto = PolymorphicSchema.prototype;\n\n  _proto.define = function define(definition) {\n    this.schema = definition;\n  };\n\n  _proto.getSchemaAttribute = function getSchemaAttribute(input, parent, key) {\n    return !this.isSingleSchema && this._schemaAttribute(input, parent, key);\n  };\n\n  _proto.inferSchema = function inferSchema(input, parent, key) {\n    if (this.isSingleSchema) {\n      return this.schema;\n    }\n\n    var attr = this.getSchemaAttribute(input, parent, key);\n    return this.schema[attr];\n  };\n\n  _proto.normalizeValue = function normalizeValue(value, parent, key, visit, addEntity, visitedEntities) {\n    var schema = this.inferSchema(value, parent, key);\n\n    if (!schema) {\n      return value;\n    }\n\n    var normalizedValue = visit(value, parent, key, schema, addEntity, visitedEntities);\n    return this.isSingleSchema || normalizedValue === undefined || normalizedValue === null ? normalizedValue : {\n      id: normalizedValue,\n      schema: this.getSchemaAttribute(value, parent, key)\n    };\n  };\n\n  _proto.denormalizeValue = function denormalizeValue(value, unvisit) {\n    var schemaKey = isImmutable(value) ? value.get('schema') : value.schema;\n\n    if (!this.isSingleSchema && !schemaKey) {\n      return value;\n    }\n\n    var id = this.isSingleSchema ? undefined : isImmutable(value) ? value.get('id') : value.id;\n    var schema = this.isSingleSchema ? this.schema : this.schema[schemaKey];\n    return unvisit(id || value, schema);\n  };\n\n  _createClass(PolymorphicSchema, [{\n    key: \"isSingleSchema\",\n    get: function get() {\n      return !this._schemaAttribute;\n    }\n  }]);\n\n  return PolymorphicSchema;\n}();\n\nvar UnionSchema =\n/*#__PURE__*/\nfunction (_PolymorphicSchema) {\n  _inheritsLoose(UnionSchema, _PolymorphicSchema);\n\n  function UnionSchema(definition, schemaAttribute) {\n    if (!schemaAttribute) {\n      throw new Error('Expected option \"schemaAttribute\" not found on UnionSchema.');\n    }\n\n    return _PolymorphicSchema.call(this, definition, schemaAttribute) || this;\n  }\n\n  var _proto = UnionSchema.prototype;\n\n  _proto.normalize = function normalize(input, parent, key, visit, addEntity, visitedEntities) {\n    return this.normalizeValue(input, parent, key, visit, addEntity, visitedEntities);\n  };\n\n  _proto.denormalize = function denormalize(input, unvisit) {\n    return this.denormalizeValue(input, unvisit);\n  };\n\n  return UnionSchema;\n}(PolymorphicSchema);\n\nvar ValuesSchema =\n/*#__PURE__*/\nfunction (_PolymorphicSchema) {\n  _inheritsLoose(ValuesSchema, _PolymorphicSchema);\n\n  function ValuesSchema() {\n    return _PolymorphicSchema.apply(this, arguments) || this;\n  }\n\n  var _proto = ValuesSchema.prototype;\n\n  _proto.normalize = function normalize(input, parent, key, visit, addEntity, visitedEntities) {\n    var _this = this;\n\n    return Object.keys(input).reduce(function (output, key, index) {\n      var _extends2;\n\n      var value = input[key];\n      return value !== undefined && value !== null ? _extends({}, output, (_extends2 = {}, _extends2[key] = _this.normalizeValue(value, input, key, visit, addEntity, visitedEntities), _extends2)) : output;\n    }, {});\n  };\n\n  _proto.denormalize = function denormalize(input, unvisit) {\n    var _this2 = this;\n\n    return Object.keys(input).reduce(function (output, key) {\n      var _extends3;\n\n      var entityOrId = input[key];\n      return _extends({}, output, (_extends3 = {}, _extends3[key] = _this2.denormalizeValue(entityOrId, unvisit), _extends3));\n    }, {});\n  };\n\n  return ValuesSchema;\n}(PolymorphicSchema);\n\nvar validateSchema = function validateSchema(definition) {\n  var isArray = Array.isArray(definition);\n\n  if (isArray && definition.length > 1) {\n    throw new Error(\"Expected schema definition to be a single schema, but found \" + definition.length + \".\");\n  }\n\n  return definition[0];\n};\n\nvar getValues = function getValues(input) {\n  return Array.isArray(input) ? input : Object.keys(input).map(function (key) {\n    return input[key];\n  });\n};\n\nvar normalize = function normalize(schema, input, parent, key, visit, addEntity, visitedEntities) {\n  schema = validateSchema(schema);\n  var values = getValues(input); // Special case: Arrays pass *their* parent on to their children, since there\n  // is not any special information that can be gathered from themselves directly\n\n  return values.map(function (value, index) {\n    return visit(value, parent, key, schema, addEntity, visitedEntities);\n  });\n};\n\nvar ArraySchema =\n/*#__PURE__*/\nfunction (_PolymorphicSchema) {\n  _inheritsLoose(ArraySchema, _PolymorphicSchema);\n\n  function ArraySchema() {\n    return _PolymorphicSchema.apply(this, arguments) || this;\n  }\n\n  var _proto = ArraySchema.prototype;\n\n  _proto.normalize = function normalize(input, parent, key, visit, addEntity, visitedEntities) {\n    var _this = this;\n\n    var values = getValues(input);\n    return values.map(function (value, index) {\n      return _this.normalizeValue(value, parent, key, visit, addEntity, visitedEntities);\n    }).filter(function (value) {\n      return value !== undefined && value !== null;\n    });\n  };\n\n  _proto.denormalize = function denormalize(input, unvisit) {\n    var _this2 = this;\n\n    return input && input.map ? input.map(function (value) {\n      return _this2.denormalizeValue(value, unvisit);\n    }) : input;\n  };\n\n  return ArraySchema;\n}(PolymorphicSchema);\n\nvar _normalize = function normalize(schema, input, parent, key, visit, addEntity, visitedEntities) {\n  var object = _extends({}, input);\n\n  Object.keys(schema).forEach(function (key) {\n    var localSchema = schema[key];\n    var resolvedLocalSchema = typeof localSchema === 'function' ? localSchema(input) : localSchema;\n    var value = visit(input[key], input, key, resolvedLocalSchema, addEntity, visitedEntities);\n\n    if (value === undefined || value === null) {\n      delete object[key];\n    } else {\n      object[key] = value;\n    }\n  });\n  return object;\n};\n\nvar _denormalize = function denormalize(schema, input, unvisit) {\n  if (isImmutable(input)) {\n    return denormalizeImmutable(schema, input, unvisit);\n  }\n\n  var object = _extends({}, input);\n\n  Object.keys(schema).forEach(function (key) {\n    if (object[key] != null) {\n      object[key] = unvisit(object[key], schema[key]);\n    }\n  });\n  return object;\n};\n\nvar ObjectSchema =\n/*#__PURE__*/\nfunction () {\n  function ObjectSchema(definition) {\n    this.define(definition);\n  }\n\n  var _proto = ObjectSchema.prototype;\n\n  _proto.define = function define(definition) {\n    this.schema = Object.keys(definition).reduce(function (entitySchema, key) {\n      var _extends2;\n\n      var schema = definition[key];\n      return _extends({}, entitySchema, (_extends2 = {}, _extends2[key] = schema, _extends2));\n    }, this.schema || {});\n  };\n\n  _proto.normalize = function normalize() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _normalize.apply(void 0, [this.schema].concat(args));\n  };\n\n  _proto.denormalize = function denormalize() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return _denormalize.apply(void 0, [this.schema].concat(args));\n  };\n\n  return ObjectSchema;\n}();\n\nvar visit = function visit(value, parent, key, schema, addEntity, visitedEntities) {\n  if (typeof value !== 'object' || !value) {\n    return value;\n  }\n\n  if (typeof schema === 'object' && (!schema.normalize || typeof schema.normalize !== 'function')) {\n    var method = Array.isArray(schema) ? normalize : _normalize;\n    return method(schema, value, parent, key, visit, addEntity, visitedEntities);\n  }\n\n  return schema.normalize(value, parent, key, visit, addEntity, visitedEntities);\n};\n\nvar addEntities = function addEntities(entities) {\n  return function (schema, processedEntity, value, parent, key) {\n    var schemaKey = schema.key;\n    var id = schema.getId(value, parent, key);\n\n    if (!(schemaKey in entities)) {\n      entities[schemaKey] = {};\n    }\n\n    var existingEntity = entities[schemaKey][id];\n\n    if (existingEntity) {\n      entities[schemaKey][id] = schema.merge(existingEntity, processedEntity);\n    } else {\n      entities[schemaKey][id] = processedEntity;\n    }\n  };\n};\n\nvar schema = {\n  Array: ArraySchema,\n  Entity: EntitySchema,\n  Object: ObjectSchema,\n  Union: UnionSchema,\n  Values: ValuesSchema\n};\nvar normalize$1 = function normalize(input, schema) {\n  if (!input || typeof input !== 'object') {\n    throw new Error(\"Unexpected input given to normalize. Expected type to be \\\"object\\\", found \\\"\" + (input === null ? 'null' : typeof input) + \"\\\".\");\n  }\n\n  var entities = {};\n  var addEntity = addEntities(entities);\n  var visitedEntities = {};\n  var result = visit(input, input, null, schema, addEntity, visitedEntities);\n  return {\n    entities: entities,\n    result: result\n  };\n};\n\nvar Normalizer = /** @class */ (function () {\n    function Normalizer() {\n    }\n    /**\n     * Normalize the record.\n     */\n    Normalizer.process = function (query, record) {\n        if (Utils.isEmpty(record)) {\n            return {};\n        }\n        var entity = query.database.schemas[query.model.entity];\n        var schema = Utils.isArray(record) ? [entity] : entity;\n        return normalize$1(record, schema).entities;\n    };\n    return Normalizer;\n}());\n\nvar PivotCreator = /** @class */ (function () {\n    function PivotCreator() {\n    }\n    /**\n     * Create an intermediate entity if the data contains any entities that\n     * require it for example `belongsTo` or `morphMany`.\n     */\n    PivotCreator.process = function (query, data) {\n        Object.keys(data).forEach(function (entity) {\n            var model = query.getModel(entity);\n            if (model.hasPivotFields()) {\n                Utils.forOwn(model.pivotFields(), function (field) {\n                    Utils.forOwn(field, function (attr, key) { attr.createPivots(model, data, key); });\n                });\n            }\n        });\n        return data;\n    };\n    return PivotCreator;\n}());\n\nvar Attacher = /** @class */ (function () {\n    function Attacher() {\n    }\n    /**\n     * Attach missing relational key to the records.\n     */\n    Attacher.process = function (query, data) {\n        Utils.forOwn(data, function (entity, name) {\n            var fields = query.getModel(name).fields();\n            Utils.forOwn(entity, function (record) {\n                Utils.forOwn(record, function (value, key) {\n                    var field = fields[key];\n                    if (field instanceof Relation) {\n                        value !== null && field.attach(value, record, data);\n                    }\n                });\n            });\n        });\n        return data;\n    };\n    return Attacher;\n}());\n\nvar Processor = /** @class */ (function () {\n    function Processor() {\n    }\n    /**\n     * Normalize the given data.\n     */\n    Processor.normalize = function (query, record) {\n        // First, let's normalize the data.\n        var data = Normalizer.process(query, record);\n        // Then, attach any missing foreign keys. For example, if a User has many\n        // Post nested but without foreign key such as `user_id`, we can attach\n        // the `user_id` value to the Post entities.\n        data = Attacher.process(query, data);\n        // Now we'll create any missing pivot entities for relationships such as\n        // `belongsTo` or `morphMany`.\n        data = PivotCreator.process(query, data);\n        // And we'll return the result as a normalized data.\n        return data;\n    };\n    return Processor;\n}());\n\nvar WhereFilter = /** @class */ (function () {\n    function WhereFilter() {\n    }\n    /**\n     * Filter the given data by registered where clause.\n     */\n    WhereFilter.filter = function (query, records) {\n        var _this = this;\n        if (query.wheres.length === 0) {\n            return records;\n        }\n        return records.filter(function (record) { return _this.check(query, record); });\n    };\n    /**\n     * Checks if given Record matches the registered where clause.\n     */\n    WhereFilter.check = function (query, record) {\n        var whereTypes = Utils.groupBy(query.wheres, function (where) { return where.boolean; });\n        var comparator = this.getComparator(query, record);\n        var results = [];\n        whereTypes.and && results.push(whereTypes.and.every(comparator));\n        whereTypes.or && results.push(whereTypes.or.some(comparator));\n        return results.indexOf(true) !== -1;\n    };\n    /**\n     * Get comparator for the where clause.\n     */\n    WhereFilter.getComparator = function (query, record) {\n        var _this = this;\n        return function (where) {\n            // Function with Record and Query as argument.\n            if (typeof where.field === 'function') {\n                var newQuery = new Query(query.store, query.entity);\n                var result = _this.executeWhereClosure(newQuery, record, where.field);\n                if (typeof result === 'boolean') {\n                    return result;\n                }\n                // If closure returns undefined, we need to execute the local query.\n                var matchingRecords = newQuery.get();\n                // And check if current record is part of the result.\n                return !Utils.isEmpty(matchingRecords.filter(function (rec) {\n                    return rec['$id'] === record['$id'];\n                }));\n            }\n            // Function with Record value as argument.\n            if (typeof where.value === 'function') {\n                return where.value(record[where.field]);\n            }\n            // Check if field value is in given where Array.\n            if (Utils.isArray(where.value)) {\n                return where.value.indexOf(record[where.field]) !== -1;\n            }\n            // Simple equal check.\n            return record[where.field] === where.value;\n        };\n    };\n    /**\n     * Execute where closure.\n     */\n    WhereFilter.executeWhereClosure = function (query, record, closure) {\n        if (closure.length !== 3) {\n            return closure(record, query);\n        }\n        var model = new query.model(record);\n        return closure(record, query, model);\n    };\n    return WhereFilter;\n}());\n\nvar OrderByFilter = /** @class */ (function () {\n    function OrderByFilter() {\n    }\n    /**\n     * Sort the given data by registered orders.\n     */\n    OrderByFilter.filter = function (query, records) {\n        if (query.orders.length === 0) {\n            return records;\n        }\n        var keys = query.orders.map(function (order) { return order.key; });\n        var directions = query.orders.map(function (order) { return order.direction; });\n        return Utils.orderBy(records, keys, directions);\n    };\n    return OrderByFilter;\n}());\n\nvar LimitFilter = /** @class */ (function () {\n    function LimitFilter() {\n    }\n    /**\n     * Limit the given records by the lmilt and offset.\n     */\n    LimitFilter.filter = function (query, records) {\n        return records.slice(query.offsetNumber, query.offsetNumber + query.limitNumber);\n    };\n    return LimitFilter;\n}());\n\nvar Filter = /** @class */ (function () {\n    function Filter() {\n    }\n    /**\n     * Filter the given data by registered where clause.\n     */\n    Filter.where = function (query, records) {\n        return WhereFilter.filter(query, records);\n    };\n    /**\n     * Sort the given data by registered orders.\n     */\n    Filter.orderBy = function (query, records) {\n        return OrderByFilter.filter(query, records);\n    };\n    /**\n     * Limit the given records by the lmilt and offset.\n     */\n    Filter.limit = function (query, records) {\n        return LimitFilter.filter(query, records);\n    };\n    return Filter;\n}());\n\nvar Loader = /** @class */ (function () {\n    function Loader() {\n    }\n    /**\n     * Set the relationships that should be eager loaded with the query.\n     */\n    Loader.with = function (query, name, constraint) {\n        var _this = this;\n        // If the name of the relation is `*`, we'll load all relationships.\n        if (name === '*') {\n            this.withAll(query);\n            return;\n        }\n        // If we passed an array, we dispatch the bits to with queries.\n        if (isArray(name)) {\n            name.forEach(function (relationName) { return _this.with(query, relationName, constraint); });\n            return;\n        }\n        // Else parse relations and set appropriate constraints.\n        this.parseWithRelations(query, name.split('.'), constraint);\n    };\n    /**\n     * Set all relationships to be eager loaded with the query.\n     */\n    Loader.withAll = function (query, constraint) {\n        if (constraint === void 0) { constraint = function () { return null; }; }\n        var fields = query.model.getFields();\n        for (var field in fields) {\n            fields[field] instanceof Relation && this.with(query, field, constraint);\n        }\n    };\n    /**\n     * Set relationships to be recursively eager loaded with the query.\n     */\n    Loader.withAllRecursive = function (query, depth) {\n        this.withAll(query, function (relatedQuery) {\n            depth > 0 && relatedQuery.withAllRecursive(depth - 1);\n        });\n    };\n    /**\n     * Set eager load relation and constraint.\n     */\n    Loader.setEagerLoad = function (query, name, constraint) {\n        if (constraint === void 0) { constraint = null; }\n        if (!query.load[name]) {\n            query.load[name] = [];\n        }\n        constraint && query.load[name].push(constraint);\n    };\n    /**\n     * Parse a list of relations into individuals.\n     */\n    Loader.parseWithRelations = function (query, relations, constraint) {\n        var _this = this;\n        // First we'll get the very first relationship from teh whole relations.\n        var relation = relations[0];\n        // If the first relation has \"or\" syntax which is `|` for example\n        // `posts|videos`, set each of them as separate eager load.\n        relation.split('|').forEach(function (name) {\n            // If there's only one relationship in relations array, that means\n            // there's no nested relationship. So we'll set the given\n            // constraint to the relationship loading.\n            if (relations.length === 1) {\n                _this.setEagerLoad(query, name, constraint);\n                return;\n            }\n            // Else we'll skip adding constraint because the constraint has to be\n            // applied to the nested relationship. We'll let `addNestedWiths`\n            // method to handle that later.\n            _this.setEagerLoad(query, name);\n        });\n        // If the given relations only contains a single name, which means it\n        // doesn't have any nested relations such as `posts.comments`, we\n        // don't need go farther so return here.\n        if (relations.length === 1) {\n            return;\n        }\n        // Finally, we shift the first relation from the array and handle lest\n        // of relations as a nested relation.\n        relations.shift();\n        this.addNestedWiths(query, relation, relations, constraint);\n    };\n    /**\n     * Parse the nested relationships in a relation.\n     */\n    Loader.addNestedWiths = function (query, name, children, constraint) {\n        this.setEagerLoad(query, name, function (nestedQuery) {\n            nestedQuery.with(children.join('.'), constraint);\n        });\n    };\n    /**\n     * Eager load the relationships for the given collection.\n     */\n    Loader.eagerLoadRelations = function (query, collection) {\n        var fields = query.model.getFields();\n        for (var name_1 in query.load) {\n            var constraints = query.load[name_1];\n            var relation = fields[name_1];\n            if (relation instanceof Relation) {\n                relation.load(query, collection, name_1, constraints);\n                continue;\n            }\n            // If no relation was found on the query, it might be run on the\n            // base entity of a hierarchy. In this case, we try looking up\n            // the relation on the derived entities\n            if (query.model.hasTypes()) {\n                var candidateRelation = query.model.findRelationInSubTypes(name_1);\n                if (candidateRelation !== null) {\n                    candidateRelation.load(query, collection, name_1, constraints);\n                }\n            }\n        }\n    };\n    return Loader;\n}());\n\nvar Rollcaller = /** @class */ (function () {\n    function Rollcaller() {\n    }\n    /**\n     * Set where constraint based on relationship existence.\n     */\n    Rollcaller.has = function (query, relation, operator, count) {\n        this.setHas(query, relation, 'exists', operator, count);\n    };\n    /**\n     * Set where constraint based on relationship absence.\n     */\n    Rollcaller.hasNot = function (query, relation, operator, count) {\n        this.setHas(query, relation, 'doesntExist', operator, count);\n    };\n    /**\n     * Add where has condition.\n     */\n    Rollcaller.whereHas = function (query, relation, constraint) {\n        this.setHas(query, relation, 'exists', undefined, undefined, constraint);\n    };\n    /**\n     * Add where has not condition.\n     */\n    Rollcaller.whereHasNot = function (query, relation, constraint) {\n        this.setHas(query, relation, 'doesntExist', undefined, undefined, constraint);\n    };\n    /**\n     * Set `has` condition.\n     */\n    Rollcaller.setHas = function (query, relation, type, operator, count, constraint) {\n        if (operator === void 0) { operator = '>='; }\n        if (count === void 0) { count = 1; }\n        if (constraint === void 0) { constraint = null; }\n        if (typeof operator === 'number') {\n            query.have.push({ relation: relation, type: type, operator: '>=', count: operator, constraint: constraint });\n            return;\n        }\n        query.have.push({ relation: relation, type: type, operator: operator, count: count, constraint: constraint });\n    };\n    /**\n     * Convert `has` conditions to where clause. It will check any relationship\n     * existence, or absence for the records then set ids of the records that\n     * matched the condition to `where` clause.\n     *\n     * This way, when the query gets executed, only those records that matched\n     * the `has` condition get retrieved. In the future, once relationship index\n     * mapping is implemented, we can simply do all checks inside the where\n     * filter since we can treat `has` condition as usual `where` condition.\n     *\n     * For now, since we must fetch any relationship by eager loading them, due\n     * to performance concern, we'll apply `has` conditions this way to gain\n     * maximum performance.\n     */\n    Rollcaller.applyConstraints = function (query) {\n        if (query.have.length === 0) {\n            return;\n        }\n        var newQuery = query.newQuery();\n        this.addHasWhereConstraints(query, newQuery);\n        this.addHasConstraints(query, newQuery.get());\n    };\n    /**\n     * Add has constraints to the given query. It's going to set all relationship\n     * as `with` alongside with its closure constraints.\n     */\n    Rollcaller.addHasWhereConstraints = function (query, newQuery) {\n        query.have.forEach(function (constraint) {\n            newQuery.with(constraint.relation, constraint.constraint);\n        });\n    };\n    /**\n     * Add has constraints as where clause.\n     */\n    Rollcaller.addHasConstraints = function (query, collection) {\n        var comparators = this.getComparators(query);\n        var ids = [];\n        collection.forEach(function (model) {\n            if (comparators.every(function (comparator) { return comparator(model); })) {\n                ids.push(model.$self().getIdFromRecord(model));\n            }\n        });\n        query.whereIdIn(ids);\n    };\n    /**\n     * Get comparators for the has clause.\n     */\n    Rollcaller.getComparators = function (query) {\n        var _this = this;\n        return query.have.map(function (constraint) { return _this.getComparator(constraint); });\n    };\n    /**\n     * Get a comparator for the has clause.\n     */\n    Rollcaller.getComparator = function (constraint) {\n        var _this = this;\n        var compare = this.getCountComparator(constraint.operator);\n        return function (model) {\n            var count = _this.getRelationshipCount(model[constraint.relation]);\n            var result = compare(count, constraint.count);\n            return constraint.type === 'exists' ? result : !result;\n        };\n    };\n    /**\n     * Get count of the relationship.\n     */\n    Rollcaller.getRelationshipCount = function (relation) {\n        if (isArray(relation)) {\n            return relation.length;\n        }\n        return relation ? 1 : 0;\n    };\n    /**\n     * Get comparator function for the `has` clause.\n     */\n    Rollcaller.getCountComparator = function (operator) {\n        switch (operator) {\n            case '=':\n                return function (x, y) { return x === y; };\n            case '>':\n                return function (x, y) { return x > y; };\n            case '>=':\n                return function (x, y) { return x >= y; };\n            case '<':\n                return function (x, y) { return x > 0 && x < y; };\n            case '<=':\n                return function (x, y) { return x > 0 && x <= y; };\n            default:\n                return function (x, y) { return x === y; };\n        }\n    };\n    return Rollcaller;\n}());\n\nvar Query = /** @class */ (function () {\n    /**\n     * Create a new Query instance.\n     */\n    function Query(store, entity) {\n        /**\n         * This flag lets us know if current Query instance applies to\n         * a base class or not (in order to know when to filter out\n         * some records).\n         */\n        this.appliedOnBase = true;\n        /**\n         * Primary key ids to filter records by. It is used for filtering records\n         * direct key lookup when a user is trying to fetch records by its\n         * primary key.\n         *\n         * It should not be used if there is a logic which prevents index usage, for\n         * example, an \"or\" condition which already requires a full scan of records.\n         */\n        this.idFilter = null;\n        /**\n         * Whether to use `idFilter` key lookup. True if there is a logic which\n         * prevents index usage, for example, an \"or\" condition which already\n         * requires full scan.\n         */\n        this.cancelIdFilter = false;\n        /**\n         * Primary key ids to filter joined records. It is used for filtering\n         * records direct key lookup. It should not be cancelled, because it\n         * is free from the effects of normal where methods.\n         */\n        this.joinedIdFilter = null;\n        /**\n         * The where constraints for the query.\n         */\n        this.wheres = [];\n        /**\n         * The has constraints for the query.\n         */\n        this.have = [];\n        /**\n         * The orders of the query result.\n         */\n        this.orders = [];\n        /**\n         * Number of results to skip.\n         */\n        this.offsetNumber = 0;\n        /**\n         * Maximum number of records to return.\n         *\n         * We use polyfill of `Number.MAX_SAFE_INTEGER` for IE11 here.\n         */\n        this.limitNumber = Math.pow(2, 53) - 1;\n        /**\n         * The relationships that should be eager loaded with the result.\n         */\n        this.load = {};\n        this.store = store;\n        this.database = store.$db();\n        this.model = this.getModel(entity);\n        this.baseModel = this.getBaseModel(entity);\n        this.entity = entity;\n        this.baseEntity = this.baseModel.entity;\n        this.rootState = this.database.getState();\n        this.state = this.rootState[this.baseEntity];\n        this.appliedOnBase = this.baseEntity === this.entity;\n    }\n    /**\n     * Delete all records from the store.\n     */\n    Query.deleteAll = function (store) {\n        var database = store.$db();\n        var models = database.models();\n        for (var entity in models) {\n            var state = database.getState()[entity];\n            state && (new this(store, entity)).deleteAll();\n        }\n    };\n    /**\n     * Register a global hook. It will return ID for the hook that users may use\n     * it to unregister hooks.\n     */\n    Query.on = function (on, callback) {\n        var id = ++this.lastHookId;\n        if (!this.hooks[on]) {\n            this.hooks[on] = [];\n        }\n        this.hooks[on].push({ id: id, callback: callback });\n        return id;\n    };\n    /**\n     * Unregister global hook with the given id.\n     */\n    Query.off = function (id) {\n        var _this = this;\n        return Object.keys(this.hooks).some(function (on) {\n            var hooks = _this.hooks[on];\n            var index = hooks.findIndex(function (h) { return h.id === id; });\n            if (index === -1) {\n                return false;\n            }\n            hooks.splice(index, 1);\n            return true;\n        });\n    };\n    /**\n     * Get query class.\n     */\n    Query.prototype.self = function () {\n        return this.constructor;\n    };\n    /**\n     * Create a new query instance.\n     */\n    Query.prototype.newQuery = function (entity) {\n        entity = entity || this.entity;\n        return (new Query(this.store, entity));\n    };\n    /**\n     * Get model of given name from the container.\n     */\n    Query.prototype.getModel = function (name) {\n        var entity = name || this.entity;\n        return this.database.model(entity);\n    };\n    /**\n     * Get all models from the container.\n     */\n    Query.prototype.getModels = function () {\n        return this.database.models();\n    };\n    /**\n     * Get base model of given name from the container.\n     */\n    Query.prototype.getBaseModel = function (name) {\n        return this.database.baseModel(name);\n    };\n    /**\n     * Returns all record of the query chain result. This method is alias\n     * of the `get` method.\n     */\n    Query.prototype.all = function () {\n        return this.get();\n    };\n    /**\n     * Find the record by the given id.\n     */\n    Query.prototype.find = function (value) {\n        var record = this.state.data[this.normalizeIndexId(value)];\n        if (!record) {\n            return null;\n        }\n        return this.item(this.hydrate(record));\n    };\n    /**\n     * Get the record of the given array of ids.\n     */\n    Query.prototype.findIn = function (values) {\n        var _this = this;\n        if (!Utils.isArray(values)) {\n            return [];\n        }\n        var records = values.reduce(function (collection, value) {\n            var record = _this.state.data[_this.normalizeIndexId(value)];\n            if (!record) {\n                return collection;\n            }\n            collection.push(_this.hydrate(record));\n            return collection;\n        }, []);\n        return this.collect(records);\n    };\n    /**\n     * Returns all record of the query chain result.\n     */\n    Query.prototype.get = function () {\n        var records = this.select();\n        return this.collect(records);\n    };\n    /**\n     * Returns the first record of the query chain result.\n     */\n    Query.prototype.first = function () {\n        var records = this.select();\n        if (records.length === 0) {\n            return null;\n        }\n        return this.item(this.hydrate(records[0]));\n    };\n    /**\n     * Returns the last record of the query chain result.\n     */\n    Query.prototype.last = function () {\n        var records = this.select();\n        if (records.length === 0) {\n            return null;\n        }\n        return this.item(this.hydrate(records[records.length - 1]));\n    };\n    /**\n     * Checks whether a result of the query chain exists.\n     */\n    Query.prototype.exists = function () {\n        var records = this.select();\n        return records.length > 0;\n    };\n    /**\n     * Add a and where clause to the query.\n     */\n    Query.prototype.where = function (field, value) {\n        if (this.isIdfilterable(field)) {\n            this.setIdFilter(value);\n        }\n        this.wheres.push({ field: field, value: value, boolean: 'and' });\n        return this;\n    };\n    /**\n     * Add a or where clause to the query.\n     */\n    Query.prototype.orWhere = function (field, value) {\n        // Cancel id filter usage, since \"or\" needs full scan.\n        this.cancelIdFilter = true;\n        this.wheres.push({ field: field, value: value, boolean: 'or' });\n        return this;\n    };\n    /**\n     * Filter records by their primary key.\n     */\n    Query.prototype.whereId = function (value) {\n        if (this.model.isCompositePrimaryKey()) {\n            return this.where('$id', this.normalizeIndexId(value));\n        }\n        return this.where(this.model.primaryKey, value);\n    };\n    /**\n     * Filter records by their primary keys.\n     */\n    Query.prototype.whereIdIn = function (values) {\n        var _this = this;\n        if (this.model.isCompositePrimaryKey()) {\n            var idList = values.reduce(function (keys, value) {\n                return __spreadArrays(keys, [_this.normalizeIndexId(value)]);\n            }, []);\n            return this.where('$id', idList);\n        }\n        return this.where(this.model.primaryKey, values);\n    };\n    /**\n     * Fast comparison for foreign keys. If the foreign key is the primary key,\n     * it uses object lookup, fallback normal where otherwise.\n     *\n     * Why separate `whereFk` instead of just `where`? Additional logic needed\n     * for the distinction between where and orWhere in normal queries, but\n     * Fk lookups are always \"and\" type.\n     */\n    Query.prototype.whereFk = function (field, value) {\n        var values = Utils.isArray(value) ? value : [value];\n        // If lookup filed is the primary key. Initialize or get intersection,\n        // because boolean and could have a condition such as\n        // `whereId(1).whereId(2).get()`.\n        if (field === this.model.primaryKey) {\n            this.setJoinedIdFilter(values);\n            return this;\n        }\n        // Else fallback to normal where.\n        this.where(field, values);\n        return this;\n    };\n    /**\n     * Convert value to string for composite primary keys as it expects an array.\n     * Otherwise return as is.\n     *\n     * Throws an error when malformed value is given:\n     * - Composite primary key defined on model, expects value to be array.\n     * - Normal primary key defined on model, expects a primitive value.\n     */\n    Query.prototype.normalizeIndexId = function (value) {\n        if (this.model.isCompositePrimaryKey()) {\n            if (!Utils.isArray(value)) {\n                throw new Error('[Vuex ORM] Entity `' + this.entity + '` is configured with a composite ' +\n                    'primary key and expects an array value but instead received: ' + JSON.stringify(value));\n            }\n            return JSON.stringify(value);\n        }\n        if (Utils.isArray(value)) {\n            throw new Error('[Vuex ORM] Entity `' + this.entity + '` expects a single value but ' +\n                'instead received: ' + JSON.stringify(value));\n        }\n        return value;\n    };\n    /**\n     * Check whether the given field is filterable through primary key\n     * direct look up.\n     */\n    Query.prototype.isIdfilterable = function (field) {\n        return (field === this.model.primaryKey || field === '$id') && !this.cancelIdFilter;\n    };\n    /**\n     * Set id filter for the given where condition.\n     */\n    Query.prototype.setIdFilter = function (value) {\n        var _this = this;\n        var values = Utils.isArray(value) ? value : [value];\n        // Initialize or get intersection, because boolean and could have a\n        // condition such as `whereIdIn([1,2,3]).whereIdIn([1,2]).get()`.\n        if (this.idFilter === null) {\n            this.idFilter = new Set(values);\n            return;\n        }\n        this.idFilter = new Set(values.filter(function (v) { return _this.idFilter.has(v); }));\n    };\n    /**\n     * Set joined id filter for the given where condition.\n     */\n    Query.prototype.setJoinedIdFilter = function (values) {\n        var _this = this;\n        // Initialize or get intersection, because boolean and could have a\n        // condition such as `whereId(1).whereId(2).get()`.\n        if (this.joinedIdFilter === null) {\n            this.joinedIdFilter = new Set(values);\n            return;\n        }\n        this.joinedIdFilter = new Set(values.filter(function (v) { return _this.joinedIdFilter.has(v); }));\n    };\n    /**\n     * Add an order to the query.\n     */\n    Query.prototype.orderBy = function (key, direction) {\n        if (direction === void 0) { direction = 'asc'; }\n        this.orders.push({ key: key, direction: direction });\n        return this;\n    };\n    /**\n     * Add an offset to the query.\n     */\n    Query.prototype.offset = function (offset) {\n        this.offsetNumber = offset;\n        return this;\n    };\n    /**\n     * Add limit to the query.\n     */\n    Query.prototype.limit = function (limit) {\n        this.limitNumber = limit;\n        return this;\n    };\n    /**\n     * Set the relationships that should be loaded.\n     */\n    Query.prototype.with = function (name, constraint) {\n        if (constraint === void 0) { constraint = null; }\n        Loader.with(this, name, constraint);\n        return this;\n    };\n    /**\n     * Query all relations.\n     */\n    Query.prototype.withAll = function () {\n        Loader.withAll(this);\n        return this;\n    };\n    /**\n     * Query all relations recursively.\n     */\n    Query.prototype.withAllRecursive = function (depth) {\n        if (depth === void 0) { depth = 3; }\n        Loader.withAllRecursive(this, depth);\n        return this;\n    };\n    /**\n     * Set where constraint based on relationship existence.\n     */\n    Query.prototype.has = function (relation, operator, count) {\n        Rollcaller.has(this, relation, operator, count);\n        return this;\n    };\n    /**\n     * Set where constraint based on relationship absence.\n     */\n    Query.prototype.hasNot = function (relation, operator, count) {\n        Rollcaller.hasNot(this, relation, operator, count);\n        return this;\n    };\n    /**\n     * Add where has condition.\n     */\n    Query.prototype.whereHas = function (relation, constraint) {\n        Rollcaller.whereHas(this, relation, constraint);\n        return this;\n    };\n    /**\n     * Add where has not condition.\n     */\n    Query.prototype.whereHasNot = function (relation, constraint) {\n        Rollcaller.whereHasNot(this, relation, constraint);\n        return this;\n    };\n    /**\n     * Get all records from the state and convert them into the array of\n     * model instances.\n     */\n    Query.prototype.records = function () {\n        var _this = this;\n        this.finalizeIdFilter();\n        return this.getIdsToLookup().reduce(function (models, id) {\n            var record = _this.state.data[id];\n            if (!record) {\n                return models;\n            }\n            var model = _this.hydrate(record);\n            // Ignore if the model is not current type of model.\n            if (!_this.appliedOnBase && !(_this.model.entity === model.$self().entity)) {\n                return models;\n            }\n            models.push(model);\n            return models;\n        }, []);\n    };\n    /**\n     * Check whether if id filters should on select. If not, clear out id filter.\n     */\n    Query.prototype.finalizeIdFilter = function () {\n        if (!this.cancelIdFilter || this.idFilter === null) {\n            return;\n        }\n        this.where(this.model.isCompositePrimaryKey() ? '$id' : this.model.primaryKey, Array.from(this.idFilter.values()));\n        this.idFilter = null;\n    };\n    /**\n     * Get a list of id that should be used to lookup when fetching records\n     * from the state.\n     */\n    Query.prototype.getIdsToLookup = function () {\n        var _this = this;\n        // If both id filter and joined id filter are set, intersect them.\n        if (this.idFilter && this.joinedIdFilter) {\n            return Array.from(this.idFilter.values()).filter(function (id) {\n                return _this.joinedIdFilter.has(id);\n            });\n        }\n        // If only either one is set, return which one is set.\n        if (this.idFilter || this.joinedIdFilter) {\n            return Array.from((this.idFilter || this.joinedIdFilter).values());\n        }\n        // If none is set, return all keys.\n        return Object.keys(this.state.data);\n    };\n    /**\n     * Process the query and filter data.\n     */\n    Query.prototype.select = function () {\n        // At first, well apply any `has` condition to the query.\n        Rollcaller.applyConstraints(this);\n        // Next, get all record as an array and then start filtering it through.\n        var records = this.records();\n        // Process `beforeSelect` hook.\n        records = this.executeSelectHook('beforeSelect', records);\n        // Let's filter the records at first by the where clauses.\n        records = this.filterWhere(records);\n        // Process `afterWhere` hook.\n        records = this.executeSelectHook('afterWhere', records);\n        // Next, lets sort the data.\n        records = this.filterOrderBy(records);\n        // Process `afterOrderBy` hook.\n        records = this.executeSelectHook('afterOrderBy', records);\n        // Finally, slice the record by limit and offset.\n        records = this.filterLimit(records);\n        // Process `afterLimit` hook.\n        records = this.executeSelectHook('afterLimit', records);\n        return records;\n    };\n    /**\n     * Filter the given data by registered where clause.\n     */\n    Query.prototype.filterWhere = function (records) {\n        return Filter.where(this, records);\n    };\n    /**\n     * Sort the given data by registered orders.\n     */\n    Query.prototype.filterOrderBy = function (records) {\n        return Filter.orderBy(this, records);\n    };\n    /**\n     * Limit the given records by the limit and offset.\n     */\n    Query.prototype.filterLimit = function (records) {\n        return Filter.limit(this, records);\n    };\n    /**\n     * Get the count of the retrieved data.\n     */\n    Query.prototype.count = function () {\n        return this.get().length;\n    };\n    /**\n     * Get the max value of the specified filed.\n     */\n    Query.prototype.max = function (field) {\n        var numbers = this.get().reduce(function (numbers, item) {\n            if (typeof item[field] === 'number') {\n                numbers.push(item[field]);\n            }\n            return numbers;\n        }, []);\n        return numbers.length === 0 ? 0 : Math.max.apply(Math, numbers);\n    };\n    /**\n     * Get the min value of the specified filed.\n     */\n    Query.prototype.min = function (field) {\n        var numbers = this.get().reduce(function (numbers, item) {\n            if (typeof item[field] === 'number') {\n                numbers.push(item[field]);\n            }\n            return numbers;\n        }, []);\n        return numbers.length === 0 ? 0 : Math.min.apply(Math, numbers);\n    };\n    /**\n     * Get the sum value of the specified filed.\n     */\n    Query.prototype.sum = function (field) {\n        return this.get().reduce(function (sum, item) {\n            if (typeof item[field] === 'number') {\n                sum += item[field];\n            }\n            return sum;\n        }, 0);\n    };\n    /**\n     * Create a item from given record.\n     */\n    Query.prototype.item = function (item) {\n        if (Object.keys(this.load).length > 0) {\n            Loader.eagerLoadRelations(this, [item]);\n        }\n        return item;\n    };\n    /**\n     * Create a collection (array) from given records.\n     */\n    Query.prototype.collect = function (collection) {\n        var _this = this;\n        if (collection.length < 1) {\n            return [];\n        }\n        if (Object.keys(this.load).length > 0) {\n            collection = collection.map(function (item) {\n                var model = _this.model.getModelFromRecord(item);\n                return new model(item);\n            });\n            Loader.eagerLoadRelations(this, collection);\n        }\n        return collection;\n    };\n    /**\n     * Create new data with all fields filled by default values.\n     */\n    Query.prototype.new = function () {\n        var model = (new this.model()).$generateId();\n        this.commitInsert(model.$getAttributes());\n        return model;\n    };\n    /**\n     * Save given data to the store by replacing all existing records in the\n     * store. If you want to save data without replacing existing records,\n     * use the `insert` method instead.\n     */\n    Query.prototype.create = function (data, options) {\n        return this.persist('create', data, options);\n    };\n    /**\n     * Create records to the state.\n     */\n    Query.prototype.createRecords = function (records) {\n        this.deleteAll();\n        return this.insertRecords(records);\n    };\n    /**\n     * Insert given data to the store. Unlike `create`, this method will not\n     * remove existing data within the store, but it will update the data\n     * with the same primary key.\n     */\n    Query.prototype.insert = function (data, options) {\n        return this.persist('insert', data, options);\n    };\n    /**\n     * Insert records to the store.\n     */\n    Query.prototype.insertRecords = function (records) {\n        var collection = this.mapHydrateRecords(records);\n        collection = this.executeMutationHooks('beforeCreate', collection);\n        this.commitInsertRecords(this.convertCollectionToRecords(collection));\n        this.executeMutationHooks('afterCreate', collection);\n        return collection;\n    };\n    /**\n     * Update data in the state.\n     */\n    Query.prototype.update = function (data, condition, options) {\n        // If the data is array, simply normalize the data and update them.\n        if (Utils.isArray(data)) {\n            return this.persist('update', data, options);\n        }\n        // OK, the data is not an array. Now let's check `data` to see what we can\n        // do if it's a closure.\n        if (typeof data === 'function') {\n            // If the data is closure, but if there's no condition, we wouldn't know\n            // what record to update so raise an error and abort.\n            if (!condition) {\n                throw new Error('You must specify `where` to update records by specifying `data` as a closure.');\n            }\n            // If the condition is a closure, then update records by the closure.\n            if (typeof condition === 'function') {\n                return this.updateByCondition(data, condition);\n            }\n            // Else the condition is either String or Number, so let's\n            // update the record by ID.\n            return this.updateById(data, condition);\n        }\n        // Now the data is not a closure, and it's not an array, so it should be an object.\n        // If the condition is closure, we can't normalize the data so let's update\n        // records using the closure.\n        if (typeof condition === 'function') {\n            return this.updateByCondition(data, condition);\n        }\n        // If there's no condition, let's normalize the data and update them.\n        if (!condition) {\n            return this.persist('update', data, options);\n        }\n        // Now since the condition is either String or Number, let's check if the\n        // model's primary key is not a composite key. If yes, we can't set the\n        // condition as ID value for the record so throw an error and abort.\n        if (this.model.isCompositePrimaryKey() && !Utils.isArray(condition)) {\n            throw new Error('[Vuex ORM] You can\\'t specify `where` value as `string` or `number` ' +\n                'when you have a composite key defined in your model. Please include ' +\n                'composite keys to the `data` fields.');\n        }\n        // Finally, let's add condition as the primary key of the object and\n        // then normalize them to update the records.\n        return this.updateById(data, condition);\n    };\n    /**\n     * Update all records.\n     */\n    Query.prototype.updateRecords = function (records) {\n        var models = this.hydrateRecordsByMerging(records);\n        return this.performUpdate(models);\n    };\n    /**\n     * Update the state by id.\n     */\n    Query.prototype.updateById = function (data, id) {\n        var _a;\n        id = typeof id === 'number' ? id.toString() : this.normalizeIndexId(id);\n        var record = this.state.data[id];\n        if (!record) {\n            return null;\n        }\n        var model = this.hydrate(record);\n        var instances = (_a = {},\n            _a[id] = this.processUpdate(data, model),\n            _a);\n        this.performUpdate(instances);\n        return instances[id];\n    };\n    /**\n     * Update the state by condition.\n     */\n    Query.prototype.updateByCondition = function (data, condition) {\n        var _this = this;\n        var instances = Object.keys(this.state.data).reduce(function (instances, id) {\n            var instance = _this.hydrate(_this.state.data[id]);\n            if (!condition(instance)) {\n                return instances;\n            }\n            instances[id] = _this.processUpdate(data, instance);\n            return instances;\n        }, {});\n        return this.performUpdate(instances);\n    };\n    /**\n     * Update the given record with given data.\n     */\n    Query.prototype.processUpdate = function (data, instance) {\n        if (typeof data === 'function') {\n            data(instance);\n            return instance;\n        }\n        // When the updated instance is not the base model, we tell te hydrate what model to use\n        if (instance.constructor !== this.model && instance instanceof Model) {\n            return this.hydrate(__assign(__assign({}, instance), data), instance.constructor);\n        }\n        return this.hydrate(__assign(__assign({}, instance), data));\n    };\n    /**\n     * Commit `update` to the state.\n     */\n    Query.prototype.performUpdate = function (models) {\n        var _this = this;\n        models = this.updateIndexes(models);\n        var beforeHooks = this.buildHooks('beforeUpdate');\n        var afterHooks = this.buildHooks('afterUpdate');\n        var updated = [];\n        var _loop_1 = function (id) {\n            var model = models[id];\n            if (beforeHooks.some(function (hook) { return hook(model, null, _this.entity) === false; })) {\n                return \"continue\";\n            }\n            this_1.commitInsert(model.$getAttributes());\n            afterHooks.forEach(function (hook) { hook(model, null, _this.entity); });\n            updated.push(model);\n        };\n        var this_1 = this;\n        for (var id in models) {\n            _loop_1(id);\n        }\n        return updated;\n    };\n    /**\n     * Update the key of the instances. This is needed when a user updates\n     * record's primary key. We must then update the index key to\n     * correspond with new id value.\n     */\n    Query.prototype.updateIndexes = function (instances) {\n        var _this = this;\n        return Object.keys(instances).reduce(function (instances, key) {\n            var instance = instances[key];\n            var id = String(_this.model.getIndexIdFromRecord(instance));\n            if (key !== id) {\n                instance.$id = id;\n                instances[id] = instance;\n                delete instances[key];\n            }\n            return instances;\n        }, instances);\n    };\n    /**\n     * Insert or update given data to the state. Unlike `insert`, this method\n     * will not replace existing data within the state, but it will update only\n     * the submitted data with the same primary key.\n     */\n    Query.prototype.insertOrUpdate = function (data, options) {\n        return this.persist('insertOrUpdate', data, options);\n    };\n    /**\n     * Insert or update the records.\n     */\n    Query.prototype.insertOrUpdateRecords = function (records) {\n        var _this = this;\n        var toBeInserted = {};\n        var toBeUpdated = {};\n        Object.keys(records).forEach(function (id) {\n            var record = records[id];\n            if (_this.state.data[id]) {\n                toBeUpdated[id] = record;\n                return;\n            }\n            toBeInserted[id] = record;\n        });\n        return __spreadArrays(this.insertRecords(toBeInserted), this.updateRecords(toBeUpdated));\n    };\n    /**\n     * Persist data into the state while preserving it's original structure.\n     */\n    Query.prototype.persist = function (method, data, options) {\n        var _this = this;\n        var clonedData = Utils.cloneDeep(data);\n        var normalizedData = this.normalize(clonedData);\n        if (Utils.isEmpty(normalizedData)) {\n            if (method === 'create') {\n                this.emptyState();\n            }\n            return {};\n        }\n        return Object.entries(normalizedData).reduce(function (collections, _a) {\n            var entity = _a[0], records = _a[1];\n            var newQuery = _this.newQuery(entity);\n            var methodForEntity = _this.getPersistMethod(entity, options, method);\n            var collection = newQuery.persistRecords(methodForEntity, records);\n            if (collection.length > 0) {\n                collections[entity] = collection;\n            }\n            return collections;\n        }, {});\n    };\n    /**\n     * Persist given records to the store by the given method.\n     */\n    Query.prototype.persistRecords = function (method, records) {\n        switch (method) {\n            case 'create':\n                return this.createRecords(records);\n            case 'insert':\n                return this.insertRecords(records);\n            case 'update':\n                return this.updateRecords(records);\n            case 'insertOrUpdate':\n                return this.insertOrUpdateRecords(records);\n        }\n    };\n    /**\n     * Get persist method from given information.\n     */\n    Query.prototype.getPersistMethod = function (entity, options, fallback) {\n        if (options.create && options.create.includes(entity)) {\n            return 'create';\n        }\n        if (options.insert && options.insert.includes(entity)) {\n            return 'insert';\n        }\n        if (options.update && options.update.includes(entity)) {\n            return 'update';\n        }\n        if (options.insertOrUpdate && options.insertOrUpdate.includes(entity)) {\n            return 'insertOrUpdate';\n        }\n        return fallback;\n    };\n    Query.prototype.delete = function (condition) {\n        if (typeof condition === 'function') {\n            return this.deleteByCondition(condition);\n        }\n        return this.deleteById(condition);\n    };\n    /**\n     * Delete all records from the store. Even when deleting all records, we'll\n     * iterate over all records to ensure that before and after hook will be\n     * called for each existing records.\n     */\n    Query.prototype.deleteAll = function () {\n        var _this = this;\n        // If the target entity is the base entity and not inherited entity, we can\n        // just delete all records.\n        if (this.appliedOnBase) {\n            return this.deleteByCondition(function () { return true; });\n        }\n        // Otherwise, we should filter out any derived entities from being deleted\n        // so we'll add such filter here.\n        return this.deleteByCondition(function (model) { return model.$self().entity === _this.model.entity; });\n    };\n    /**\n     * Delete a record from the store by given id.\n     */\n    Query.prototype.deleteById = function (id) {\n        var item = this.find(id);\n        if (!item) {\n            return null;\n        }\n        return this.deleteByCondition(function (model) { return model.$id === item.$id; })[0];\n    };\n    /**\n     * Perform the actual delete query to the store.\n     */\n    Query.prototype.deleteByCondition = function (condition) {\n        var collection = this.mapHydrateAndFilterRecords(this.state.data, condition);\n        collection = this.executeMutationHooks('beforeDelete', collection);\n        if (collection.length === 0) {\n            return [];\n        }\n        this.commitDelete(collection.map(function (model) { return model.$id; }));\n        this.executeMutationHooks('afterDelete', collection);\n        return collection;\n    };\n    /**\n     * Commit mutation.\n     */\n    Query.prototype.commit = function (name, payload) {\n        this.store.commit(this.database.namespace + \"/\" + name, __assign({ entity: this.baseEntity }, payload));\n    };\n    /**\n     * Commit insert mutation.\n     */\n    Query.prototype.commitInsert = function (record) {\n        this.commit('insert', { record: record });\n    };\n    /**\n     * Commit insert records mutation.\n     */\n    Query.prototype.commitInsertRecords = function (records) {\n        this.commit('insertRecords', { records: records });\n    };\n    /**\n     * Commit delete mutation.\n     */\n    Query.prototype.commitDelete = function (id) {\n        this.commit('delete', { id: id });\n    };\n    /**\n     * Normalize the given data.\n     */\n    Query.prototype.normalize = function (data) {\n        return Processor.normalize(this, data);\n    };\n    /**\n     * Convert given record to the model instance.\n     */\n    Query.prototype.hydrate = function (record, forceModel) {\n        var _a;\n        if (forceModel) {\n            return new forceModel(record);\n        }\n        var newModel = this.model.getModelFromRecord(record);\n        if (newModel !== null) {\n            return new newModel(record);\n        }\n        if (!this.appliedOnBase && record[this.model.typeKey] === undefined) {\n            var typeValue = this.model.getTypeKeyValueFromModel();\n            record = __assign(__assign({}, record), (_a = {}, _a[this.model.typeKey] = typeValue, _a));\n            return new this.model(record);\n        }\n        var baseModel = this.getBaseModel(this.entity);\n        return new baseModel(record);\n    };\n    /**\n     * Convert given records to instances by merging existing record. If there's\n     * no existing record, that record will not be included in the result.\n     */\n    Query.prototype.hydrateRecordsByMerging = function (records) {\n        var _this = this;\n        return Object.keys(records).reduce(function (instances, id) {\n            var recordInStore = _this.state.data[id];\n            if (!recordInStore) {\n                return instances;\n            }\n            var record = records[id];\n            var modelForRecordInStore = _this.model.getModelFromRecord(recordInStore);\n            if (modelForRecordInStore === null) {\n                instances[id] = _this.hydrate(__assign(__assign({}, recordInStore), record));\n                return instances;\n            }\n            instances[id] = _this.hydrate(__assign(__assign({}, recordInStore), record), modelForRecordInStore);\n            return instances;\n        }, {});\n    };\n    /**\n     * Convert all given records and return it as a collection.\n     */\n    Query.prototype.mapHydrateRecords = function (records) {\n        var _this = this;\n        return Utils.map(records, function (record) { return _this.hydrate(record); });\n    };\n    /**\n     * Convert all given records and return it as a collection.\n     */\n    Query.prototype.mapHydrateAndFilterRecords = function (records, condition) {\n        var collection = [];\n        for (var key in records) {\n            var model = this.hydrate(records[key]);\n            condition(model) && collection.push(model);\n        }\n        return collection;\n    };\n    /**\n     * Convert given collection to records by using index id as a key.\n     */\n    Query.prototype.convertCollectionToRecords = function (collection) {\n        return collection.reduce(function (carry, model) {\n            carry[model['$id']] = model.$getAttributes();\n            return carry;\n        }, {});\n    };\n    /**\n     * Clears the current state from any data related to current model.\n     *\n     * - Everything if not in a inheritance scheme.\n     * - Only derived instances if applied to a derived entity.\n     */\n    Query.prototype.emptyState = function () {\n        this.deleteAll();\n    };\n    /**\n     * Build executable hook collection for the given hook.\n     */\n    Query.prototype.buildHooks = function (on) {\n        var hooks = this.getGlobalHookAsArray(on);\n        var localHook = this.model[on];\n        localHook && hooks.push(localHook.bind(this.model));\n        return hooks;\n    };\n    /**\n     * Get global hook of the given name as array by stripping id key and keep\n     * only hook functions.\n     */\n    Query.prototype.getGlobalHookAsArray = function (on) {\n        var _this = this;\n        var hooks = this.self().hooks[on];\n        return hooks ? hooks.map(function (h) { return h.callback.bind(_this); }) : [];\n    };\n    /**\n     * Execute mutation hooks to the given collection.\n     */\n    Query.prototype.executeMutationHooks = function (on, collection) {\n        var _this = this;\n        var hooks = this.buildHooks(on);\n        if (hooks.length === 0) {\n            return collection;\n        }\n        return collection.filter(function (model) {\n            return !hooks.some(function (hook) { return hook(model, null, _this.entity) === false; });\n        });\n    };\n    /**\n     * Execute retrieve hook for the given method.\n     */\n    Query.prototype.executeSelectHook = function (on, models) {\n        var _this = this;\n        var hooks = this.buildHooks(on);\n        return hooks.reduce(function (collection, hook) {\n            collection = hook(models, _this.entity);\n            return collection;\n        }, models);\n    };\n    /**\n     * The global lifecycle hook registries.\n     */\n    Query.hooks = {};\n    /**\n     * The counter to generate the UID for global hooks.\n     */\n    Query.lastHookId = 0;\n    return Query;\n}());\n\n/**\n * Create a new Query instance.\n */\nfunction query$1(_state) {\n    var _this = this;\n    return function (entity) { return new Query(_this, entity); };\n}\n/**\n * Get all data of given entity.\n */\nfunction all$1(_state) {\n    var _this = this;\n    return function (entity) { return (new Query(_this, entity)).all(); };\n}\n/**\n * Find a data of the given entity by given id.\n */\nfunction find$1(_state) {\n    var _this = this;\n    return function (entity, id) {\n        return (new Query(_this, entity)).find(id);\n    };\n}\n/**\n * Find a data of the given entity by given id.\n */\nfunction findIn$1(_state) {\n    var _this = this;\n    return function (entity, idList) {\n        return (new Query(_this, entity)).findIn(idList);\n    };\n}\nvar RootGetters = {\n    query: query$1,\n    all: all$1,\n    find: find$1,\n    findIn: findIn$1\n};\n\nvar OptionsBuilder = /** @class */ (function () {\n    function OptionsBuilder() {\n    }\n    /**\n     * Get persist options from the given payload.\n     */\n    OptionsBuilder.createPersistOptions = function (payload) {\n        return {\n            create: payload.create,\n            insert: payload.insert,\n            update: payload.update,\n            insertOrUpdate: payload.insertOrUpdate\n        };\n    };\n    return OptionsBuilder;\n}());\n\n/**\n * Create new data with all fields filled by default values.\n */\nfunction newRecord$1(_context, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            return [2 /*return*/, (new Query(this, payload.entity)).new()];\n        });\n    });\n}\n/**\n * Save given data to the store by replacing all existing records in the\n * store. If you want to save data without replacing existing records,\n * use the `insert` method instead.\n */\nfunction create$1(_context, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n        var entity, data, options;\n        return __generator(this, function (_a) {\n            entity = payload.entity;\n            data = payload.data;\n            options = OptionsBuilder.createPersistOptions(payload);\n            return [2 /*return*/, (new Query(this, entity)).create(data, options)];\n        });\n    });\n}\n/**\n * Insert given data to the state. Unlike `create`, this method will not\n * remove existing data within the state, but it will update the data\n * with the same primary key.\n */\nfunction insert$1(_context, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n        var entity, data, options;\n        return __generator(this, function (_a) {\n            entity = payload.entity;\n            data = payload.data;\n            options = OptionsBuilder.createPersistOptions(payload);\n            return [2 /*return*/, (new Query(this, entity)).insert(data, options)];\n        });\n    });\n}\n/**\n * Update data in the store.\n */\nfunction update$1(_context, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n        var entity, data, where, options;\n        return __generator(this, function (_a) {\n            entity = payload.entity;\n            data = payload.data;\n            where = payload.where || null;\n            options = OptionsBuilder.createPersistOptions(payload);\n            return [2 /*return*/, (new Query(this, entity)).update(data, where, options)];\n        });\n    });\n}\n/**\n * Insert or update given data to the state. Unlike `insert`, this method\n * will not replace existing data within the state, but it will update only\n * the submitted data with the same primary key.\n */\nfunction insertOrUpdate$1(_context, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n        var entity, data, options;\n        return __generator(this, function (_a) {\n            entity = payload.entity;\n            data = payload.data;\n            options = OptionsBuilder.createPersistOptions(payload);\n            return [2 /*return*/, (new Query(this, entity)).insertOrUpdate(data, options)];\n        });\n    });\n}\nfunction destroy$1(_context, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n        var entity, where;\n        return __generator(this, function (_a) {\n            entity = payload.entity, where = payload.where;\n            return [2 /*return*/, (new Query(this, entity)).delete(where)];\n        });\n    });\n}\n/**\n * Delete all data from the store.\n */\nfunction deleteAll$1(_context, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            if (payload && payload.entity) {\n                (new Query(this, payload.entity)).deleteAll();\n                return [2 /*return*/];\n            }\n            Query.deleteAll(this);\n            return [2 /*return*/];\n        });\n    });\n}\nvar RootActions = {\n    new: newRecord$1,\n    create: create$1,\n    insert: insert$1,\n    update: update$1,\n    insertOrUpdate: insertOrUpdate$1,\n    delete: destroy$1,\n    deleteAll: deleteAll$1\n};\n\nvar Connection = /** @class */ (function () {\n    /**\n     * Create a new connection instance.\n     */\n    function Connection(store, connection, entity) {\n        this.store = store;\n        this.connection = connection;\n        this.entity = entity;\n        this.rootState = this.store.state[connection];\n        this.state = this.rootState[entity];\n    }\n    /**\n     * Insert the given record.\n     */\n    Connection.prototype.insert = function (record) {\n        var _a;\n        this.state.data = __assign(__assign({}, this.state.data), (_a = {}, _a[record.$id] = record, _a));\n    };\n    /**\n     * Insert the given records.\n     */\n    Connection.prototype.insertRecords = function (records) {\n        this.state.data = __assign(__assign({}, this.state.data), records);\n    };\n    /**\n     * Delete records that matches the given id.\n     */\n    Connection.prototype.delete = function (id) {\n        var data = {};\n        for (var i in this.state.data) {\n            if (!id.includes(i)) {\n                data[i] = this.state.data[i];\n            }\n        }\n        this.state.data = data;\n    };\n    return Connection;\n}());\n\n/**\n * Execute generic mutation. This method is used by `Model.commit` method so\n * that user can commit any state changes easily through models.\n */\nfunction $mutate(state, payload) {\n    payload.callback(state[payload.entity]);\n}\n/**\n * Insert the given record.\n */\nfunction insert$2(state, payload) {\n    var entity = payload.entity, record = payload.record;\n    (new Connection(this, state.$name, entity)).insert(record);\n}\n/**\n * Insert the given records.\n */\nfunction insertRecords(state, payload) {\n    var entity = payload.entity, records = payload.records;\n    (new Connection(this, state.$name, entity)).insertRecords(records);\n}\n/**\n * Delete records from the store. The actual name for this mutation is\n * `delete`, but named `destroy` here because `delete` can't be declared at\n * this scope level.\n */\nfunction destroy$2(state, payload) {\n    var entity = payload.entity, id = payload.id;\n    (new Connection(this, state.$name, entity)).delete(id);\n}\nvar RootMutations = {\n    $mutate: $mutate,\n    insert: insert$2,\n    insertRecords: insertRecords,\n    delete: destroy$2\n};\n\nvar IdAttribute = /** @class */ (function () {\n    function IdAttribute() {\n    }\n    /**\n     * Creates a closure that generates the required id's for an entity.\n     */\n    IdAttribute.create = function (model) {\n        var _this = this;\n        return function (value, _parentValue, _key) {\n            _this.generateIds(value, model);\n            var indexId = _this.generateIndexId(value, model);\n            return indexId;\n        };\n    };\n    /**\n     * Generate a field that is defined as primary keys. For keys with a proper\n     * value set, it will do nothing. If a key is missing, it will generate\n     * UID for it.\n     */\n    IdAttribute.generateIds = function (record, model) {\n        var keys = isArray(model.primaryKey) ? model.primaryKey : [model.primaryKey];\n        keys.forEach(function (k) {\n            if (record[k] !== undefined && record[k] !== null) {\n                return;\n            }\n            var attr = model.getFields()[k];\n            record[k] = attr instanceof Uid$1 ? attr.make() : Uid.make();\n        });\n    };\n    /**\n     * Generate index id field (which is `$id`) and attach to the given record.\n     */\n    IdAttribute.generateIndexId = function (record, model) {\n        record.$id = model.getIndexIdFromRecord(record);\n        return record.$id;\n    };\n    return IdAttribute;\n}());\n\nvar Schema = /** @class */ (function () {\n    /**\n     * Create a new schema instance.\n     */\n    function Schema(model) {\n        var _this = this;\n        /**\n         * List of generated schemas.\n         */\n        this.schemas = {};\n        this.model = model;\n        var models = model.database().models();\n        Object.keys(models).forEach(function (name) { _this.one(models[name]); });\n    }\n    /**\n     * Create a schema for the given model.\n     */\n    Schema.create = function (model) {\n        return (new this(model)).one();\n    };\n    /**\n     * Create a single schema for the given model.\n     */\n    Schema.prototype.one = function (model) {\n        model = model || this.model;\n        if (this.schemas[model.entity]) {\n            return this.schemas[model.entity];\n        }\n        var schema$1 = new schema.Entity(model.entity, {}, {\n            idAttribute: IdAttribute.create(model)\n        });\n        this.schemas[model.entity] = schema$1;\n        var definition = this.definition(model);\n        schema$1.define(definition);\n        return schema$1;\n    };\n    /**\n     * Create an array schema for the given model.\n     */\n    Schema.prototype.many = function (model) {\n        return new schema.Array(this.one(model));\n    };\n    /**\n     * Create an union schema for the given model.\n     */\n    Schema.prototype.union = function (callback) {\n        return new schema.Union(this.schemas, callback);\n    };\n    /**\n     * Create a dfinition for the given model.\n     */\n    Schema.prototype.definition = function (model) {\n        var _this = this;\n        var fields = model.getFields();\n        return Object.keys(fields).reduce(function (definition, key) {\n            var field = fields[key];\n            if (field instanceof Relation) {\n                definition[key] = field.define(_this);\n            }\n            return definition;\n        }, {});\n    };\n    return Schema;\n}());\n\nvar Database = /** @class */ (function () {\n    function Database() {\n        /**\n         * The list of entities. It contains models and modules with its name.\n         * The name is going to be the namespace for the Vuex Modules.\n         */\n        this.entities = [];\n        /**\n         * The normalizr schema.\n         */\n        this.schemas = {};\n        /**\n         * Whether the database has already been installed to Vuex or not.\n         * Model registration steps depend on its value.\n         */\n        this.isStarted = false;\n    }\n    /**\n     * Initialize the database before a user can start using it.\n     */\n    Database.prototype.start = function (store, namespace) {\n        this.store = store;\n        this.namespace = namespace;\n        this.connect();\n        this.registerModules();\n        this.createSchema();\n        this.isStarted = true;\n    };\n    /**\n     * Register a model and a module to Database.\n     */\n    Database.prototype.register = function (model, module) {\n        if (module === void 0) { module = {}; }\n        this.checkModelTypeMappingCapability(model);\n        var entity = {\n            name: model.entity,\n            base: model.baseEntity || model.entity,\n            model: this.createBindingModel(model),\n            module: module\n        };\n        this.entities.push(entity);\n        if (this.isStarted) {\n            this.registerModule(entity);\n            this.registerSchema(entity);\n        }\n    };\n    Database.prototype.model = function (model) {\n        var name = typeof model === 'string' ? model : model.entity;\n        var m = this.models()[name];\n        if (!m) {\n            throw new Error(\"[Vuex ORM] Could not find the model `\" + name + \"`. Please check if you \" +\n                'have registered the model to the database.');\n        }\n        return m;\n    };\n    Database.prototype.baseModel = function (model) {\n        var name = typeof model === 'string' ? model : model.entity;\n        var m = this.baseModels()[name];\n        if (!m) {\n            throw new Error(\"[Vuex ORM] Could not find the model `\" + name + \"`. Please check if you \" +\n                'have registered the model to the database.');\n        }\n        return m;\n    };\n    /**\n     * Get all models from the entities list.\n     */\n    Database.prototype.models = function () {\n        return this.entities.reduce(function (models, entity) {\n            models[entity.name] = entity.model;\n            return models;\n        }, {});\n    };\n    /**\n     * Get all base models from the entities list.\n     */\n    Database.prototype.baseModels = function () {\n        var _this = this;\n        return this.entities.reduce(function (models, entity) {\n            models[entity.name] = _this.model(entity.base);\n            return models;\n        }, {});\n    };\n    /**\n     * Get the module of the given name from the entities list.\n     */\n    Database.prototype.module = function (name) {\n        var module = this.modules()[name];\n        if (!module) {\n            throw new Error(\"[Vuex ORM] Could not find the module `\" + name + \"`. Please check if you \" +\n                'have registered the module to the database.');\n        }\n        return module;\n    };\n    /**\n     * Get all modules from the entities list.\n     */\n    Database.prototype.modules = function () {\n        return this.entities.reduce(function (modules, entity) {\n            modules[entity.name] = entity.module;\n            return modules;\n        }, {});\n    };\n    /**\n     * Get the root state from the store.\n     */\n    Database.prototype.getState = function () {\n        return this.store.state[this.namespace];\n    };\n    /**\n     * Create a new model that binds the database.\n     *\n     * Transpiled classes cannot extend native classes. Implemented a workaround\n     * until Babel releases a fix (https://github.com/babel/babel/issues/9367).\n     */\n    Database.prototype.createBindingModel = function (model) {\n        var _this = this;\n        var proxy;\n        try {\n            proxy = new Function('model', \"\\n        'use strict';\\n        return class \" + model.name + \" extends model {}\\n      \")(model);\n        }\n        catch (_a) {\n            /* istanbul ignore next: rollback (mostly <= IE10) */\n            proxy = /** @class */ (function (_super) {\n                __extends(proxy, _super);\n                function proxy() {\n                    return _super !== null && _super.apply(this, arguments) || this;\n                }\n                return proxy;\n            }(model));\n            /* istanbul ignore next: allocate model name */\n            Object.defineProperty(proxy, 'name', { get: function () { return model.name; } });\n        }\n        Object.defineProperty(proxy, 'store', {\n            value: function () { return _this.store; }\n        });\n        return proxy;\n    };\n    /**\n     * Create Vuex Module from the registered entities, and register to\n     * the store.\n     */\n    Database.prototype.registerModules = function () {\n        this.store.registerModule(this.namespace, this.createModule());\n    };\n    /**\n     * Generate module from the given entity, and register to the store.\n     */\n    Database.prototype.registerModule = function (entity) {\n        this.store.registerModule([this.namespace, entity.name], this.createSubModule(entity));\n    };\n    /**\n     * Create Vuex Module from the registered entities.\n     */\n    Database.prototype.createModule = function () {\n        var _this = this;\n        var module = this.createRootModule();\n        this.entities.forEach(function (entity) {\n            module.modules[entity.name] = _this.createSubModule(entity);\n        });\n        return module;\n    };\n    /**\n     * Create root module.\n     */\n    Database.prototype.createRootModule = function () {\n        return {\n            namespaced: true,\n            state: this.createRootState(),\n            getters: this.createRootGetters(),\n            actions: this.createRootActions(),\n            mutations: this.createRootMutations(),\n            modules: {}\n        };\n    };\n    /**\n     * Create root state.\n     */\n    Database.prototype.createRootState = function () {\n        var _this = this;\n        return function () { return ({ $name: _this.namespace }); };\n    };\n    /**\n     * Create root getters. For the getters, we bind the store instance to each\n     * function to retrieve database instances within getters. We only need this\n     * for the getter since actions and mutations are already bound to store.\n     */\n    Database.prototype.createRootGetters = function () {\n        var _this = this;\n        return mapValues(RootGetters, function (_getter, name) {\n            return RootGetters[name].bind(_this.store);\n        });\n    };\n    /**\n     * Create root actions.\n     */\n    Database.prototype.createRootActions = function () {\n        return RootActions;\n    };\n    /**\n     * Create root mutations.\n     */\n    Database.prototype.createRootMutations = function () {\n        return RootMutations;\n    };\n    /**\n     * Create sub module.\n     */\n    Database.prototype.createSubModule = function (entity) {\n        return {\n            namespaced: true,\n            state: this.createSubState(entity),\n            getters: this.createSubGetters(entity),\n            actions: this.createSubActions(entity),\n            mutations: this.createSubMutations(entity)\n        };\n    };\n    /**\n     * Create sub state.\n     */\n    Database.prototype.createSubState = function (entity) {\n        var _this = this;\n        var name = entity.name, model = entity.model, module = entity.module;\n        var modelState = typeof model.state === 'function' ? model.state() : model.state;\n        var moduleState = typeof module.state === 'function' ? module.state() : module.state;\n        return function () { return (__assign(__assign(__assign({}, modelState), moduleState), { $connection: _this.namespace, $name: name, data: {} })); };\n    };\n    /**\n     * Create sub getters.\n     */\n    Database.prototype.createSubGetters = function (entity) {\n        return __assign(__assign({}, Getters), entity.module.getters);\n    };\n    /**\n     * Create sub actions.\n     */\n    Database.prototype.createSubActions = function (entity) {\n        return __assign(__assign({}, Actions), entity.module.actions);\n    };\n    /**\n     * Create sub mutations.\n     */\n    Database.prototype.createSubMutations = function (entity) {\n        var _a;\n        return _a = entity.module.mutations, (_a !== null && _a !== void 0 ? _a : {});\n    };\n    /**\n     * Create the schema definition from registered entities list and set it to\n     * the `schema` property. This schema will be used by the normalizer\n     * to normalize data before persisting them to the Vuex Store.\n     */\n    Database.prototype.createSchema = function () {\n        var _this = this;\n        this.entities.forEach(function (entity) {\n            _this.registerSchema(entity);\n        });\n    };\n    /**\n     * Generate schema from the given entity.\n     */\n    Database.prototype.registerSchema = function (entity) {\n        this.schemas[entity.name] = Schema.create(entity.model);\n    };\n    /**\n     * Inject database to the store instance.\n     */\n    Database.prototype.connect = function () {\n        var _this = this;\n        this.store.$db = function () { return _this; };\n    };\n    /**\n     * Warn user if the given model is a type of an inherited model that is being\n     * defined without overwriting `Model.types()` because the user will not be\n     * able to use the type mapping feature in this case.\n     */\n    Database.prototype.checkModelTypeMappingCapability = function (model) {\n        // We'll not be logging any warning if it's on a production environment,\n        // so let's return here if it is.\n        /* istanbul ignore next */\n        if (false) {}\n        // If the model doesn't have `baseEntity` property set, we'll assume it is\n        // not an inherited model so we can stop here.\n        if (!model.baseEntity) {\n            return;\n        }\n        // Now it seems like the model is indeed an inherited model. Let's check if\n        // it has `types()` method declared, or we'll warn the user that it's not\n        // possible to use type mapping feature.\n        var baseModel = this.model(model.baseEntity);\n        if (baseModel && baseModel.types === Model.types) {\n            console.warn(\"[Vuex ORM] Model `\" + model.name + \"` extends `\" + baseModel.name + \"` which doesn't \" +\n                'overwrite Model.types(). You will not be able to use type mapping.');\n        }\n    };\n    return Database;\n}());\n\nfunction use (plugin, options) {\n    if (options === void 0) { options = {}; }\n    var components = {\n        Model: Model,\n        Attribute: Attribute,\n        Type: Type,\n        Attr: Attr,\n        String: String$1,\n        Number: Number,\n        Boolean: Boolean,\n        Uid: Uid$1,\n        Relation: Relation,\n        HasOne: HasOne,\n        BelongsTo: BelongsTo,\n        HasMany: HasMany,\n        HasManyBy: HasManyBy,\n        BelongsToMany: BelongsToMany,\n        HasManyThrough: HasManyThrough,\n        MorphTo: MorphTo,\n        MorphOne: MorphOne,\n        MorphMany: MorphMany,\n        MorphToMany: MorphToMany,\n        MorphedByMany: MorphedByMany,\n        Getters: Getters,\n        Actions: Actions,\n        RootGetters: RootGetters,\n        RootActions: RootActions,\n        RootMutations: RootMutations,\n        Query: Query,\n        Database: Database\n    };\n    plugin.install(components, options);\n}\n\nvar index = {\n    install: install,\n    use: use,\n    Container: Container,\n    Database: Database,\n    Model: Model,\n    Attribute: Attribute,\n    Type: Type,\n    Attr: Attr,\n    String: String$1,\n    Number: Number,\n    Boolean: Boolean,\n    Uid: Uid$1,\n    Relation: Relation,\n    HasOne: HasOne,\n    BelongsTo: BelongsTo,\n    HasMany: HasMany,\n    HasManyBy: HasManyBy,\n    BelongsToMany: BelongsToMany,\n    HasManyThrough: HasManyThrough,\n    MorphTo: MorphTo,\n    MorphOne: MorphOne,\n    MorphMany: MorphMany,\n    MorphToMany: MorphToMany,\n    MorphedByMany: MorphedByMany,\n    Getters: Getters,\n    Actions: Actions,\n    RootGetters: RootGetters,\n    RootActions: RootActions,\n    RootMutations: RootMutations,\n    Query: Query\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (index);\n\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/@vuex-orm/core/dist/vuex-orm.esm.js?");

/***/ }),

/***/ "./node_modules/@vuex-orm/plugin-axios/dist/vuex-orm-axios.esm-browser.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@vuex-orm/plugin-axios/dist/vuex-orm-axios.esm-browser.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"Request\": () => (/* binding */ Request),\n/* harmony export */   \"Response\": () => (/* binding */ Response)\n/* harmony export */ });\nclass Response {\r\n    /**\r\n     * Create a new response instance.\r\n     */\r\n    constructor(model, config, response) {\r\n        /**\r\n         * Entities created by Vuex ORM.\r\n         */\r\n        this.entities = null;\r\n        /**\r\n         * Whether if response data is saved to the store or not.\r\n         */\r\n        this.isSaved = false;\r\n        this.model = model;\r\n        this.config = config;\r\n        this.response = response;\r\n    }\r\n    /**\r\n     * Save response data to the store.\r\n     */\r\n    async save() {\r\n        const data = this.getDataFromResponse();\r\n        if (!this.validateData(data)) {\r\n            console.warn('[Vuex ORM Axios] The response data could not be saved to the store ' +\r\n                'because it is not an object or an array. You might want to use ' +\r\n                '`dataTransformer` option to handle non-array/object response ' +\r\n                'before saving it to the store.');\r\n            return;\r\n        }\r\n        let method = this.config.persistBy || 'insertOrUpdate';\r\n        if (!this.validatePersistAction(method)) {\r\n            console.warn('[Vuex ORM Axios] The \"persistBy\" option configured is not a ' +\r\n                'recognized value. Response data will be persisted by the ' +\r\n                'default `insertOrUpdate` method.');\r\n            method = 'insertOrUpdate';\r\n        }\r\n        const options = this.getPersistOptions();\r\n        this.entities = await this.model[method]({ data, ...options });\r\n        this.isSaved = true;\r\n    }\r\n    /**\r\n     * Delete the entity record where the `delete` option is configured.\r\n     */\r\n    async delete() {\r\n        if (this.config.delete === undefined) {\r\n            throw new Error('[Vuex ORM Axios] Could not delete records because the `delete` option is not set.');\r\n        }\r\n        await this.model.delete(this.config.delete);\r\n    }\r\n    /**\r\n     * Get the response data from the axios response object. If a `dataTransformer`\r\n     * option is configured, it will be applied to the response object. If the\r\n     * `dataKey` option is configured, it will return the data from the given\r\n     * property within the response body.\r\n     */\r\n    getDataFromResponse() {\r\n        if (this.config.dataTransformer) {\r\n            return this.config.dataTransformer(this.response);\r\n        }\r\n        if (this.config.dataKey) {\r\n            return this.response.data[this.config.dataKey];\r\n        }\r\n        return this.response.data;\r\n    }\r\n    /**\r\n     * Get persist options if any set in config.\r\n     */\r\n    getPersistOptions() {\r\n        const persistOptions = this.config.persistOptions;\r\n        if (!persistOptions || typeof persistOptions !== 'object') {\r\n            return;\r\n        }\r\n        return Object.keys(persistOptions)\r\n            .filter(this.validatePersistAction) // Filter to avoid polluting the payload.\r\n            .reduce((carry, key) => {\r\n            carry[key] = persistOptions[key];\r\n            return carry;\r\n        }, {});\r\n    }\r\n    /**\r\n     * Validate the given data to ensure the Vuex ORM persist methods accept it.\r\n     */\r\n    validateData(data) {\r\n        return data !== null && typeof data === 'object';\r\n    }\r\n    /**\r\n     * Validate the given string as to ensure it correlates with the available\r\n     * Vuex ORM persist methods.\r\n     */\r\n    validatePersistAction(action) {\r\n        return ['create', 'insert', 'update', 'insertOrUpdate'].includes(action);\r\n    }\r\n}\n\nclass Request {\r\n    /**\r\n     * Create a new api instance.\r\n     */\r\n    constructor(model) {\r\n        /**\r\n         * The default config.\r\n         */\r\n        this.config = {\r\n            save: true\r\n        };\r\n        this.model = model;\r\n        this.registerActions();\r\n    }\r\n    /**\r\n     * Get the axios client.\r\n     */\r\n    get axios() {\r\n        if (!this.model.axios) {\r\n            throw new Error('[Vuex ORM Axios] The axios instance is not registered. Please register the axios instance to the model.');\r\n        }\r\n        return this.model.axios;\r\n    }\r\n    /**\r\n     * Register actions from the model config.\r\n     */\r\n    registerActions() {\r\n        const actions = this.model.apiConfig.actions;\r\n        if (!actions) {\r\n            return;\r\n        }\r\n        for (const name in actions) {\r\n            const action = actions[name];\r\n            typeof action === 'function'\r\n                ? this.registerFunctionAction(name, action)\r\n                : this.registerObjectAction(name, action);\r\n        }\r\n    }\r\n    /**\r\n     * Register the given object action.\r\n     */\r\n    registerObjectAction(name, action) {\r\n        this[name] = (config) => {\r\n            return this.request({ ...action, ...config });\r\n        };\r\n    }\r\n    /**\r\n     * Register the given function action.\r\n     */\r\n    registerFunctionAction(name, action) {\r\n        this[name] = action.bind(this);\r\n    }\r\n    /**\r\n     * Perform a get request.\r\n     */\r\n    get(url, config = {}) {\r\n        return this.request({ method: 'get', url, ...config });\r\n    }\r\n    /**\r\n     * Perform a post request.\r\n     */\r\n    post(url, data = {}, config = {}) {\r\n        return this.request({ method: 'post', url, data, ...config });\r\n    }\r\n    /**\r\n     * Perform a put request.\r\n     */\r\n    put(url, data = {}, config = {}) {\r\n        return this.request({ method: 'put', url, data, ...config });\r\n    }\r\n    /**\r\n     * Perform a patch request.\r\n     */\r\n    patch(url, data = {}, config = {}) {\r\n        return this.request({ method: 'patch', url, data, ...config });\r\n    }\r\n    /**\r\n     * Perform a delete request.\r\n     */\r\n    delete(url, config = {}) {\r\n        return this.request({ method: 'delete', url, ...config });\r\n    }\r\n    /**\r\n     * Perform an api request.\r\n     */\r\n    async request(config) {\r\n        const requestConfig = this.createConfig(config);\r\n        const axiosResponse = await this.axios.request(requestConfig);\r\n        return this.createResponse(axiosResponse, requestConfig);\r\n    }\r\n    /**\r\n     * Create a new config by merging the global config, the model config,\r\n     * and the given config.\r\n     */\r\n    createConfig(config) {\r\n        return {\r\n            ...this.config,\r\n            ...this.model.globalApiConfig,\r\n            ...this.model.apiConfig,\r\n            ...config\r\n        };\r\n    }\r\n    /**\r\n     * Create a new response instance by applying a few initialization processes.\r\n     * For example, it saves response data if `save` option id set to `true`.\r\n     */\r\n    async createResponse(axiosResponse, config) {\r\n        const response = new Response(this.model, config, axiosResponse);\r\n        if (config.delete !== undefined) {\r\n            await response.delete();\r\n            return response;\r\n        }\r\n        config.save && (await response.save());\r\n        return response;\r\n    }\r\n}\n\nfunction Model(model, config) {\r\n    /**\r\n     * The api client.\r\n     */\r\n    model.axios = config.axios || null;\r\n    /**\r\n     * The global api configuration for all models.\r\n     */\r\n    model.globalApiConfig = config;\r\n    /**\r\n     * The api configuration for the model.\r\n     */\r\n    model.apiConfig = {};\r\n    /**\r\n     * Set the given api client.\r\n     */\r\n    model.setAxios = function (axios) {\r\n        this.axios = axios;\r\n    };\r\n    /**\r\n     * Get the api instance.\r\n     */\r\n    model.api = function () {\r\n        return new Request(this);\r\n    };\r\n}\n\nclass VuexORMAxios {\r\n    /**\r\n     * Create a new Vuex ORM Axios instance.\r\n     */\r\n    constructor(components, config) {\r\n        this.model = components.Model;\r\n        this.config = config;\r\n    }\r\n    /**\r\n     * Plug-in features.\r\n     */\r\n    plugin() {\r\n        Model(this.model, this.config);\r\n    }\r\n}\n\nvar index = {\r\n    install(components, config) {\r\n        new VuexORMAxios(components, config).plugin();\r\n    }\r\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (index);\n\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/@vuex-orm/plugin-axios/dist/vuex-orm-axios.esm-browser.js?");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\nvar settle = __webpack_require__(/*! ./../core/settle */ \"./node_modules/axios/lib/core/settle.js\");\nvar cookies = __webpack_require__(/*! ./../helpers/cookies */ \"./node_modules/axios/lib/helpers/cookies.js\");\nvar buildURL = __webpack_require__(/*! ./../helpers/buildURL */ \"./node_modules/axios/lib/helpers/buildURL.js\");\nvar buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ \"./node_modules/axios/lib/core/buildFullPath.js\");\nvar parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ \"./node_modules/axios/lib/helpers/parseHeaders.js\");\nvar isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ \"./node_modules/axios/lib/helpers/isURLSameOrigin.js\");\nvar createError = __webpack_require__(/*! ../core/createError */ \"./node_modules/axios/lib/core/createError.js\");\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request.onreadystatechange = function handleLoad() {\n      if (!request || request.readyState !== 4) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (!requestData) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/adapters/xhr.js?");

/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./utils */ \"./node_modules/axios/lib/utils.js\");\nvar bind = __webpack_require__(/*! ./helpers/bind */ \"./node_modules/axios/lib/helpers/bind.js\");\nvar Axios = __webpack_require__(/*! ./core/Axios */ \"./node_modules/axios/lib/core/Axios.js\");\nvar mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ \"./node_modules/axios/lib/core/mergeConfig.js\");\nvar defaults = __webpack_require__(/*! ./defaults */ \"./node_modules/axios/lib/defaults.js\");\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Factory for creating new instances\naxios.create = function create(instanceConfig) {\n  return createInstance(mergeConfig(axios.defaults, instanceConfig));\n};\n\n// Expose Cancel & CancelToken\naxios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ \"./node_modules/axios/lib/cancel/Cancel.js\");\naxios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ \"./node_modules/axios/lib/cancel/CancelToken.js\");\naxios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ \"./node_modules/axios/lib/cancel/isCancel.js\");\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = __webpack_require__(/*! ./helpers/spread */ \"./node_modules/axios/lib/helpers/spread.js\");\n\n// Expose isAxiosError\naxios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ \"./node_modules/axios/lib/helpers/isAxiosError.js\");\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/axios.js?");

/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/cancel/Cancel.js?");

/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar Cancel = __webpack_require__(/*! ./Cancel */ \"./node_modules/axios/lib/cancel/Cancel.js\");\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/cancel/CancelToken.js?");

/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/cancel/isCancel.js?");

/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\nvar buildURL = __webpack_require__(/*! ../helpers/buildURL */ \"./node_modules/axios/lib/helpers/buildURL.js\");\nvar InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ \"./node_modules/axios/lib/core/InterceptorManager.js\");\nvar dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ \"./node_modules/axios/lib/core/dispatchRequest.js\");\nvar mergeConfig = __webpack_require__(/*! ./mergeConfig */ \"./node_modules/axios/lib/core/mergeConfig.js\");\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = arguments[1] || {};\n    config.url = arguments[0];\n  } else {\n    config = config || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  // Hook up interceptors middleware\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/core/Axios.js?");

/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/core/InterceptorManager.js?");

/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ \"./node_modules/axios/lib/helpers/isAbsoluteURL.js\");\nvar combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ \"./node_modules/axios/lib/helpers/combineURLs.js\");\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/core/buildFullPath.js?");

/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar enhanceError = __webpack_require__(/*! ./enhanceError */ \"./node_modules/axios/lib/core/enhanceError.js\");\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/core/createError.js?");

/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\nvar transformData = __webpack_require__(/*! ./transformData */ \"./node_modules/axios/lib/core/transformData.js\");\nvar isCancel = __webpack_require__(/*! ../cancel/isCancel */ \"./node_modules/axios/lib/cancel/isCancel.js\");\nvar defaults = __webpack_require__(/*! ../defaults */ \"./node_modules/axios/lib/defaults.js\");\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/core/dispatchRequest.js?");

/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code\n    };\n  };\n  return error;\n};\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/core/enhanceError.js?");

/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"./node_modules/axios/lib/utils.js\");\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  var valueFromConfig2Keys = ['url', 'method', 'data'];\n  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];\n  var defaultToConfig2Keys = [\n    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',\n    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',\n    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',\n    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',\n    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'\n  ];\n  var directMergeKeys = ['validateStatus'];\n\n  function getMergedValue(target, source) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge(target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  function mergeDeepProperties(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      config[prop] = getMergedValue(config1[prop], config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      config[prop] = getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      config[prop] = getMergedValue(undefined, config2[prop]);\n    }\n  });\n\n  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);\n\n  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      config[prop] = getMergedValue(undefined, config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      config[prop] = getMergedValue(undefined, config1[prop]);\n    }\n  });\n\n  utils.forEach(directMergeKeys, function merge(prop) {\n    if (prop in config2) {\n      config[prop] = getMergedValue(config1[prop], config2[prop]);\n    } else if (prop in config1) {\n      config[prop] = getMergedValue(undefined, config1[prop]);\n    }\n  });\n\n  var axiosKeys = valueFromConfig2Keys\n    .concat(mergeDeepPropertiesKeys)\n    .concat(defaultToConfig2Keys)\n    .concat(directMergeKeys);\n\n  var otherKeys = Object\n    .keys(config1)\n    .concat(Object.keys(config2))\n    .filter(function filterAxiosKeys(key) {\n      return axiosKeys.indexOf(key) === -1;\n    });\n\n  utils.forEach(otherKeys, mergeDeepProperties);\n\n  return config;\n};\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/core/mergeConfig.js?");

/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar createError = __webpack_require__(/*! ./createError */ \"./node_modules/axios/lib/core/createError.js\");\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/core/settle.js?");

/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn(data, headers);\n  });\n\n  return data;\n};\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/core/transformData.js?");

/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./utils */ \"./node_modules/axios/lib/utils.js\");\nvar normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ \"./node_modules/axios/lib/helpers/normalizeHeaderName.js\");\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = __webpack_require__(/*! ./adapters/xhr */ \"./node_modules/axios/lib/adapters/xhr.js\");\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = __webpack_require__(/*! ./adapters/http */ \"./node_modules/axios/lib/adapters/xhr.js\");\n  }\n  return adapter;\n}\n\nvar defaults = {\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (e) { /* Ignore */ }\n    }\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\n\ndefaults.headers = {\n  common: {\n    'Accept': 'application/json, text/plain, */*'\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/defaults.js?");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/helpers/bind.js?");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/helpers/buildURL.js?");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/helpers/combineURLs.js?");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/helpers/cookies.js?");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/helpers/isAbsoluteURL.js?");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nmodule.exports = function isAxiosError(payload) {\n  return (typeof payload === 'object') && (payload.isAxiosError === true);\n};\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/helpers/isAxiosError.js?");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/helpers/isURLSameOrigin.js?");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ../utils */ \"./node_modules/axios/lib/utils.js\");\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/helpers/normalizeHeaderName.js?");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/helpers/parseHeaders.js?");

/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/helpers/spread.js?");

/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar bind = __webpack_require__(/*! ./helpers/bind */ \"./node_modules/axios/lib/helpers/bind.js\");\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {Object} val The value to test\n * @return {boolean} True if value is a plain Object, otherwise false\n */\nfunction isPlainObject(val) {\n  if (toString.call(val) !== '[object Object]') {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\n      result[key] = merge(result[key], val);\n    } else if (isPlainObject(val)) {\n      result[key] = merge({}, val);\n    } else if (isArray(val)) {\n      result[key] = val.slice();\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n * @return {string} content value without BOM\n */\nfunction stripBOM(content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim,\n  stripBOM: stripBOM\n};\n\n\n//# sourceURL=webpack://pepr-assets/./node_modules/axios/lib/utils.js?");

/***/ })

}]);